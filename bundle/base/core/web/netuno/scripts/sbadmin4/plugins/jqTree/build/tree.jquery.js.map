{"version":3,"sources":["webpack:///webpack/bootstrap 97fa1237e8b214e85b8e","webpack:///./src/node.ts","webpack:///./src/util.ts","webpack:///external \"jQuery\"","webpack:///./src/simple.widget.ts","webpack:///./src/tree.jquery.ts","webpack:///./src/version.ts","webpack:///./src/drag_and_drop_handler.ts","webpack:///./src/elements_renderer.ts","webpack:///./src/key_handler.ts","webpack:///./src/mouse.widget.ts","webpack:///./src/save_state_handler.ts","webpack:///./src/scroll_handler.ts","webpack:///./src/select_node_handler.ts","webpack:///./src/node_element.ts"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,uDAAuD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,iBAAiB;AAClD,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,iBAAiB,sBAAsB;;AAEvC,iBAAiB,sCAAsC;;AAEvD,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oBAAoB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oDAAoD,gBAAgB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,wBAAwB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,2BAA2B,EAAE;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,gBAAgB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,4BAA4B,EAAE;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,0CAA0C,yBAAyB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,6BAA6B;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;ACzhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA,6BAA6B;AAC7B,4BAA4B;AAC5B,4BAA4B;AAC5B,8BAA8B;AAC9B,8BAA8B;AAC9B,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC7BA,wB;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,sCAAsC,uCAAuC;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,gBAAgB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,gBAAgB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,gBAAgB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;AClGA;AACA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,yBAAyB,EAAE;AAClF,sDAAsD,yBAAyB,EAAE;;AAEjF;AACA;AACA;AACA,0CAA0C,yBAAyB,EAAE;AACrE,2CAA2C,yBAAyB,EAAE;AACtqEAAqE;AACrcAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,+CAA+C;AAC/C,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjqCAAqC,qBAAqB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,kBAAkB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF,2CAA2C;AACpI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,cAAc;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;ACz9BA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,yBAAyB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;AC/dD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,wBAAwB;AACvtrHA;AACA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;AC3JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,0EAA0E,aAAa,EAAE;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,wBAAwB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,wBAAwB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,wBAAwB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;ACtNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,8BAA8B;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,gBAAgB;AACxpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;AC3GA;AACA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,cAAc;AAC7C,wCAAwC,yBAAyB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,cAAc;AAC7C,wCAAwC,yBAAyB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","file":"tree.jquery.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 97fa1237e8b214e85b8e","\"use strict\";\nexports.__esModule = true;\nvar Position;\n(function (Position) {\n    Position[Position[\"Before\"] = 1] = \"Before\";\n    Position[Position[\"After\"] = 2] = \"After\";\n    Position[Position[\"Inside\"] = 3] = \"Inside\";\n    Position[Position[\"None\"] = 4] = \"None\";\n})(Position = exports.Position || (exports.Position = {}));\nexports.position_names = {\n    before: Position.Before,\n    after: Position.After,\n    inside: Position.Inside,\n    none: Position.None\n};\nfunction getPositionName(position) {\n    for (var name_1 in exports.position_names) {\n        if (exports.position_names.hasOwnProperty(name_1)) {\n            if (exports.position_names[name_1] === position) {\n                return name_1;\n            }\n        }\n    }\n    return \"\";\n}\nexports.getPositionName = getPositionName;\nfunction getPosition(name) {\n    return exports.position_names[name];\n}\nexports.getPosition = getPosition;\nvar Node = /** @class */ (function () {\n    function Node(o, is_root, node_class) {\n        if (is_root === void 0) { is_root = false; }\n        if (node_class === void 0) { node_class = Node; }\n        this.name = \"\";\n        this.setData(o);\n        this.children = [];\n        this.parent = null;\n        if (is_root) {\n            this.id_mapping = {};\n            this.tree = this;\n            this.node_class = node_class;\n        }\n    }\n    /*\n    Set the data of this node.\n\n    setData(string): set the name of the node\n    setdata(object): set attributes of the node\n\n    Examples:\n        setdata('node1')\n\n        setData({ name: 'node1', id: 1});\n\n        setData({ name: 'node2', id: 2, color: 'green'});\n\n    * This is an internal function; it is not in the docs\n    * Does not remove existing node values\n    */\n    Node.prototype.setData = function (o) {\n        var _this = this;\n        var setName = function (name) {\n            if (name != null) {\n                _this.name = name;\n            }\n        };\n        if (!o) {\n            return;\n        }\n        else if (typeof o !== \"object\") {\n            setName(o);\n        }\n        else {\n            for (var key in o) {\n                if (o.hasOwnProperty(key)) {\n                    var value = o[key];\n                    if (key === \"label\") {\n                        // You can use the 'label' key instead of 'name'; this is a legacy feature\n                        setName(value);\n                    }\n                    else if (key !== \"children\") {\n                        // You can't update the children using this function\n                        this[key] = value;\n                    }\n                }\n            }\n        }\n    };\n    /*\n    Create tree from data.\n\n    Structure of data is:\n    [\n        {\n            label: 'node1',\n            children: [\n                { label: 'child1' },\n                { label: 'child2' }\n            ]\n        },\n        {\n            label: 'node2'\n        }\n    ]\n    */\n    Node.prototype.loadFromData = function (data) {\n        this.removeChildren();\n        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n            var o = data_1[_i];\n            var node = new this.tree.node_class(o);\n            this.addChild(node);\n            if (typeof o === \"object\" && o[\"children\"]) {\n                node.loadFromData(o[\"children\"]);\n            }\n        }\n    };\n    /*\n    Add child.\n\n    tree.addChild(\n        new Node('child1')\n    );\n    */\n    Node.prototype.addChild = function (node) {\n        this.children.push(node);\n        node._setParent(this);\n    };\n    /*\n    Add child at position. Index starts at 0.\n\n    tree.addChildAtPosition(\n        new Node('abc'),\n        1\n    );\n    */\n    Node.prototype.addChildAtPosition = function (node, index) {\n        this.children.splice(index, 0, node);\n        node._setParent(this);\n    };\n    /*\n    Remove child. This also removes the children of the node.\n\n    tree.removeChild(tree.children[0]);\n    */\n    Node.prototype.removeChild = function (node) {\n        // remove children from the index\n        node.removeChildren();\n        this._removeChild(node);\n    };\n    /*\n    Get child index.\n\n    var index = getChildIndex(node);\n    */\n    Node.prototype.getChildIndex = function (node) {\n        return jQuery.inArray(node, this.children);\n    };\n    /*\n    Does the tree have children?\n\n    if (tree.hasChildren()) {\n        //\n    }\n    */\n    Node.prototype.hasChildren = function () {\n        return this.children.length !== 0;\n    };\n    Node.prototype.isFolder = function () {\n        return this.hasChildren() || this.load_on_demand;\n    };\n    /*\n    Iterate over all the nodes in the tree.\n\n    Calls callback with (node, level).\n\n    The callback must return true to continue the iteration on current node.\n\n    tree.iterate(\n        function(node, level) {\n           console.log(node.name);\n\n           // stop iteration after level 2\n           return (level <= 2);\n        }\n    );\n\n    */\n    Node.prototype.iterate = function (callback) {\n        var _iterate = function (node, level) {\n            if (node.children) {\n                for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n                    var child = _a[_i];\n                    var result = callback(child, level);\n                    if (result && child.hasChildren()) {\n                        _iterate(child, level + 1);\n                    }\n                }\n            }\n        };\n        _iterate(this, 0);\n    };\n    /*\n    Move node relative to another node.\n\n    Argument position: Position.BEFORE, Position.AFTER or Position.Inside\n\n    // move node1 after node2\n    tree.moveNode(node1, node2, Position.AFTER);\n    */\n    Node.prototype.moveNode = function (moved_node, target_node, position) {\n        if (!moved_node.parent || moved_node.isParentOf(target_node)) {\n            // - Node is parent of target node\n            // - Or, parent is empty\n            return;\n        }\n        else {\n            moved_node.parent._removeChild(moved_node);\n            if (position === Position.After) {\n                if (target_node.parent) {\n                    target_node.parent.addChildAtPosition(moved_node, target_node.parent.getChildIndex(target_node) + 1);\n                }\n            }\n            else if (position === Position.Before) {\n                if (target_node.parent) {\n                    target_node.parent.addChildAtPosition(moved_node, target_node.parent.getChildIndex(target_node));\n                }\n            }\n            else if (position === Position.Inside) {\n                // move inside as first child\n                target_node.addChildAtPosition(moved_node, 0);\n            }\n        }\n    };\n    /*\n    Get the tree as data.\n    */\n    Node.prototype.getData = function (include_parent) {\n        if (include_parent === void 0) { include_parent = false; }\n        function getDataFromNodes(nodes) {\n            return nodes.map(function (node) {\n                var tmp_node = {};\n                for (var k in node) {\n                    if ([\"parent\", \"children\", \"element\", \"tree\"].indexOf(k) ===\n                        -1 &&\n                        Object.prototype.hasOwnProperty.call(node, k)) {\n                        var v = node[k];\n                        tmp_node[k] = v;\n                    }\n                }\n                if (node.hasChildren()) {\n                    tmp_node[\"children\"] = getDataFromNodes(node.children);\n                }\n                return tmp_node;\n            });\n        }\n        if (include_parent) {\n            return getDataFromNodes([this]);\n        }\n        else {\n            return getDataFromNodes(this.children);\n        }\n    };\n    Node.prototype.getNodeByName = function (name) {\n        return this.getNodeByCallback(function (node) { return node.name === name; });\n    };\n    Node.prototype.getNodeByCallback = function (callback) {\n        var result = null;\n        this.iterate(function (node) {\n            if (callback(node)) {\n                result = node;\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n        return result;\n    };\n    Node.prototype.addAfter = function (node_info) {\n        if (!this.parent) {\n            return null;\n        }\n        else {\n            var node = new this.tree.node_class(node_info);\n            var child_index = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, child_index + 1);\n            if (typeof node_info === \"object\" &&\n                node_info[\"children\"] &&\n                node_info[\"children\"].length) {\n                node.loadFromData(node_info[\"children\"]);\n            }\n            return node;\n        }\n    };\n    Node.prototype.addBefore = function (node_info) {\n        if (!this.parent) {\n            return null;\n        }\n        else {\n            var node = new this.tree.node_class(node_info);\n            var child_index = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, child_index);\n            if (typeof node_info === \"object\" &&\n                node_info[\"children\"] &&\n                node_info[\"children\"].length) {\n                node.loadFromData(node_info[\"children\"]);\n            }\n            return node;\n        }\n    };\n    Node.prototype.addParent = function (node_info) {\n        if (!this.parent) {\n            return null;\n        }\n        else {\n            var new_parent = new this.tree.node_class(node_info);\n            new_parent._setParent(this.tree);\n            var original_parent = this.parent;\n            for (var _i = 0, _a = original_parent.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                new_parent.addChild(child);\n            }\n            original_parent.children = [];\n            original_parent.addChild(new_parent);\n            return new_parent;\n        }\n    };\n    Node.prototype.remove = function () {\n        if (this.parent) {\n            this.parent.removeChild(this);\n            this.parent = null;\n        }\n    };\n    Node.prototype.append = function (node_info) {\n        var node = new this.tree.node_class(node_info);\n        this.addChild(node);\n        if (typeof node_info === \"object\" &&\n            node_info[\"children\"] &&\n            node_info[\"children\"].length) {\n            node.loadFromData(node_info[\"children\"]);\n        }\n        return node;\n    };\n    Node.prototype.prepend = function (node_info) {\n        var node = new this.tree.node_class(node_info);\n        this.addChildAtPosition(node, 0);\n        if (typeof node_info === \"object\" &&\n            node_info[\"children\"] &&\n            node_info[\"children\"].length) {\n            node.loadFromData(node_info[\"children\"]);\n        }\n        return node;\n    };\n    Node.prototype.isParentOf = function (node) {\n        var parent = node.parent;\n        while (parent) {\n            if (parent === this) {\n                return true;\n            }\n            parent = parent.parent;\n        }\n        return false;\n    };\n    Node.prototype.getLevel = function () {\n        var level = 0;\n        var node = this;\n        while (node.parent) {\n            level += 1;\n            node = node.parent;\n        }\n        return level;\n    };\n    Node.prototype.getNodeById = function (node_id) {\n        return this.id_mapping[node_id];\n    };\n    Node.prototype.addNodeToIndex = function (node) {\n        if (node.id != null) {\n            this.id_mapping[node.id] = node;\n        }\n    };\n    Node.prototype.removeNodeFromIndex = function (node) {\n        if (node.id != null) {\n            delete this.id_mapping[node.id];\n        }\n    };\n    Node.prototype.removeChildren = function () {\n        var _this = this;\n        this.iterate(function (child) {\n            _this.tree.removeNodeFromIndex(child);\n            return true;\n        });\n        this.children = [];\n    };\n    Node.prototype.getPreviousSibling = function () {\n        if (!this.parent) {\n            return null;\n        }\n        else {\n            var previous_index = this.parent.getChildIndex(this) - 1;\n            if (previous_index >= 0) {\n                return this.parent.children[previous_index];\n            }\n            else {\n                return null;\n            }\n        }\n    };\n    Node.prototype.getNextSibling = function () {\n        if (!this.parent) {\n            return null;\n        }\n        else {\n            var next_index = this.parent.getChildIndex(this) + 1;\n            if (next_index < this.parent.children.length) {\n                return this.parent.children[next_index];\n            }\n            else {\n                return null;\n            }\n        }\n    };\n    Node.prototype.getNodesByProperty = function (key, value) {\n        return this.filter(function (node) { return node[key] === value; });\n    };\n    Node.prototype.filter = function (f) {\n        var result = [];\n        this.iterate(function (node) {\n            if (f(node)) {\n                result.push(node);\n            }\n            return true;\n        });\n        return result;\n    };\n    Node.prototype.getNextNode = function (include_children) {\n        if (include_children === void 0) { include_children = true; }\n        if (include_children && this.hasChildren() && this.is_open) {\n            // First child\n            return this.children[0];\n        }\n        else {\n            if (!this.parent) {\n                return null;\n            }\n            else {\n                var next_sibling = this.getNextSibling();\n                if (next_sibling) {\n                    // Next sibling\n                    return next_sibling;\n                }\n                else {\n                    // Next node of parent\n                    return this.parent.getNextNode(false);\n                }\n            }\n        }\n    };\n    Node.prototype.getPreviousNode = function () {\n        if (!this.parent) {\n            return null;\n        }\n        else {\n            var previous_sibling = this.getPreviousSibling();\n            if (previous_sibling) {\n                if (!previous_sibling.hasChildren() ||\n                    !previous_sibling.is_open) {\n                    // Previous sibling\n                    return previous_sibling;\n                }\n                else {\n                    // Last child of previous sibling\n                    return previous_sibling.getLastChild();\n                }\n            }\n            else {\n                return this.getParent();\n            }\n        }\n    };\n    Node.prototype.getParent = function () {\n        // Return parent except if it is the root node\n        if (!this.parent) {\n            return null;\n        }\n        else if (!this.parent.parent) {\n            // Root node -> null\n            return null;\n        }\n        else {\n            return this.parent;\n        }\n    };\n    Node.prototype.getLastChild = function () {\n        if (!this.hasChildren()) {\n            return null;\n        }\n        else {\n            var last_child = this.children[this.children.length - 1];\n            if (!last_child.hasChildren() || !last_child.is_open) {\n                return last_child;\n            }\n            else {\n                return last_child.getLastChild();\n            }\n        }\n    };\n    // Init Node from data without making it the root of the tree\n    Node.prototype.initFromData = function (data) {\n        var _this = this;\n        var addNode = function (node_data) {\n            _this.setData(node_data);\n            if (node_data[\"children\"]) {\n                addChildren(node_data[\"children\"]);\n            }\n        };\n        var addChildren = function (children_data) {\n            for (var _i = 0, children_data_1 = children_data; _i < children_data_1.length; _i++) {\n                var child = children_data_1[_i];\n                var node = new _this.tree.node_class(\"\");\n                node.initFromData(child);\n                _this.addChild(node);\n            }\n        };\n        addNode(data);\n    };\n    Node.prototype._setParent = function (parent) {\n        this.parent = parent;\n        this.tree = parent.tree;\n        this.tree.addNodeToIndex(this);\n    };\n    Node.prototype._removeChild = function (node) {\n        this.children.splice(this.getChildIndex(node), 1);\n        this.tree.removeNodeFromIndex(node);\n    };\n    return Node;\n}());\nexports.Node = Node;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/node.ts\n// module id = 0\n// module chunks = 0 1","\"use strict\";\nexports.__esModule = true;\nfunction isInt(n) {\n    return typeof n === \"number\" && n % 1 === 0;\n}\nexports.isInt = isInt;\nfunction isFunction(v) {\n    return typeof v === \"function\";\n}\nexports.isFunction = isFunction;\n// Escape a string for HTML interpolation; copied from underscore js\nfunction html_escape(text) {\n    return (\"\" + text)\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#x27;\")\n        .replace(/\\//g, \"&#x2F;\");\n}\nexports.html_escape = html_escape;\nfunction getBoolString(value) {\n    if (value) {\n        return \"true\";\n    }\n    else {\n        return \"false\";\n    }\n}\nexports.getBoolString = getBoolString;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/util.ts\n// module id = 1\n// module chunks = 0 1","module.exports = jQuery;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jQuery\"\n// module id = 2\n// module chunks = 0 1","\"use strict\";\nexports.__esModule = true;\nvar SimpleWidget = /** @class */ (function () {\n    function SimpleWidget(el, options) {\n        this.$el = jQuery(el);\n        var defaults = this.constructor.defaults;\n        this.options = jQuery.extend({}, defaults, options);\n    }\n    SimpleWidget.register = function (widget_class, widget_name) {\n        var getDataKey = function () { return \"simple_widget_\" + widget_name; };\n        function getWidgetData(el, data_key) {\n            var widget = jQuery.data(el, data_key);\n            if (widget && widget instanceof SimpleWidget) {\n                return widget;\n            }\n            else {\n                return null;\n            }\n        }\n        function createWidget($el, options) {\n            var data_key = getDataKey();\n            for (var _i = 0, _a = $el.get(); _i < _a.length; _i++) {\n                var el = _a[_i];\n                var existing_widget = getWidgetData(el, data_key);\n                if (!existing_widget) {\n                    var widget = new widget_class(el, options);\n                    if (!jQuery.data(el, data_key)) {\n                        jQuery.data(el, data_key, widget);\n                    }\n                    // Call init after setting data, so we can call methods\n                    widget._init();\n                }\n            }\n            return $el;\n        }\n        function destroyWidget($el) {\n            var data_key = getDataKey();\n            for (var _i = 0, _a = $el.get(); _i < _a.length; _i++) {\n                var el = _a[_i];\n                var widget = getWidgetData(el, data_key);\n                if (widget) {\n                    widget.destroy();\n                }\n                jQuery.removeData(el, data_key);\n            }\n        }\n        function callFunction($el, function_name, args) {\n            var result = null;\n            for (var _i = 0, _a = $el.get(); _i < _a.length; _i++) {\n                var el = _a[_i];\n                var widget = jQuery.data(el, getDataKey());\n                if (widget && widget instanceof SimpleWidget) {\n                    var widget_function = widget[function_name];\n                    if (widget_function &&\n                        typeof widget_function === \"function\") {\n                        result = widget_function.apply(widget, args);\n                    }\n                }\n            }\n            return result;\n        }\n        // tslint:disable-next-line: only-arrow-functions\n        jQuery.fn[widget_name] = function (argument1) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            var $el = this;\n            if (argument1 === undefined || typeof argument1 === \"object\") {\n                var options = argument1;\n                return createWidget($el, options);\n            }\n            else if (typeof argument1 === \"string\" && argument1[0] !== \"_\") {\n                var function_name = argument1;\n                if (function_name === \"destroy\") {\n                    return destroyWidget($el);\n                }\n                else if (function_name === \"get_widget_class\") {\n                    return widget_class;\n                }\n                else {\n                    return callFunction($el, function_name, args);\n                }\n            }\n        };\n    };\n    SimpleWidget.prototype.destroy = function () {\n        this._deinit();\n    };\n    SimpleWidget.prototype._init = function () {\n        //\n    };\n    SimpleWidget.prototype._deinit = function () {\n        //\n    };\n    SimpleWidget.defaults = {};\n    return SimpleWidget;\n}());\nexports[\"default\"] = SimpleWidget;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/simple.widget.ts\n// module id = 3\n// module chunks = 0 1","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\nvar version_1 = require(\"./version\");\nvar jQuery = require(\"jquery\");\nvar drag_and_drop_handler_1 = require(\"./drag_and_drop_handler\");\nvar elements_renderer_1 = require(\"./elements_renderer\");\nvar key_handler_1 = require(\"./key_handler\");\nvar mouse_widget_1 = require(\"./mouse.widget\");\nvar save_state_handler_1 = require(\"./save_state_handler\");\nvar scroll_handler_1 = require(\"./scroll_handler\");\nvar select_node_handler_1 = require(\"./select_node_handler\");\nvar simple_widget_1 = require(\"./simple.widget\");\nvar node_1 = require(\"./node\");\nvar util_1 = require(\"./util\");\nvar node_element_1 = require(\"./node_element\");\nvar JqTreeWidget = /** @class */ (function (_super) {\n    __extends(JqTreeWidget, _super);\n    function JqTreeWidget() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._handleClick = function (e) {\n            var click_target = _this._getClickTarget(e.target);\n            if (click_target) {\n                if (click_target.type === \"button\") {\n                    _this.toggle(click_target.node, _this.options.slide);\n                    e.preventDefault();\n                    e.stopPropagation();\n                }\n                else if (click_target.type === \"label\") {\n                    var node = click_target.node;\n                    var event_1 = _this._triggerEvent(\"tree.click\", {\n                        node: node,\n                        click_event: e\n                    });\n                    if (!event_1.isDefaultPrevented()) {\n                        _this._selectNode(node, true);\n                    }\n                }\n            }\n        };\n        _this._handleDblclick = function (e) {\n            var click_target = _this._getClickTarget(e.target);\n            if (click_target && click_target.type === \"label\") {\n                _this._triggerEvent(\"tree.dblclick\", {\n                    node: click_target.node,\n                    click_event: e\n                });\n            }\n        };\n        _this._handleContextmenu = function (e) {\n            var $div = jQuery(e.target).closest(\"ul.jqtree-tree .jqtree-element\");\n            if ($div.length) {\n                var node = _this._getNode($div);\n                if (node) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    _this._triggerEvent(\"tree.contextmenu\", {\n                        node: node,\n                        click_event: e\n                    });\n                    return false;\n                }\n            }\n            return null;\n        };\n        return _this;\n    }\n    JqTreeWidget.prototype.toggle = function (node, slide_param) {\n        var slide = slide_param == null ? this.options.slide : slide_param;\n        if (node.is_open) {\n            this.closeNode(node, slide);\n        }\n        else {\n            this.openNode(node, slide);\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.getTree = function () {\n        return this.tree;\n    };\n    JqTreeWidget.prototype.selectNode = function (node) {\n        this._selectNode(node, false);\n        return this.element;\n    };\n    JqTreeWidget.prototype.getSelectedNode = function () {\n        if (this.select_node_handler) {\n            return this.select_node_handler.getSelectedNode();\n        }\n        else {\n            return false;\n        }\n    };\n    JqTreeWidget.prototype.toJson = function () {\n        return JSON.stringify(this.tree.getData());\n    };\n    JqTreeWidget.prototype.loadData = function (data, parent_node) {\n        this._loadData(data, parent_node);\n        return this.element;\n    };\n    /*\n    signatures:\n    - loadDataFromUrl(url, parent_node=null, on_finished=null)\n        loadDataFromUrl('/my_data');\n        loadDataFromUrl('/my_data', node1);\n        loadDataFromUrl('/my_data', node1, function() { console.log('finished'); });\n        loadDataFromUrl('/my_data', null, function() { console.log('finished'); });\n\n    - loadDataFromUrl(parent_node=null, on_finished=null)\n        loadDataFromUrl();\n        loadDataFromUrl(node1);\n        loadDataFromUrl(null, function() { console.log('finished'); });\n        loadDataFromUrl(node1, function() { console.log('finished'); });\n    */\n    JqTreeWidget.prototype.loadDataFromUrl = function (param1, param2, param3) {\n        if (typeof param1 === \"string\") {\n            // first parameter is url\n            this._loadDataFromUrl(param1, param2, param3);\n        }\n        else {\n            // first parameter is not url\n            this._loadDataFromUrl(null, param1, param2);\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.reload = function (on_finished) {\n        this._loadDataFromUrl(null, null, on_finished);\n        return this.element;\n    };\n    JqTreeWidget.prototype.getNodeById = function (node_id) {\n        return this.tree.getNodeById(node_id);\n    };\n    JqTreeWidget.prototype.getNodeByName = function (name) {\n        return this.tree.getNodeByName(name);\n    };\n    JqTreeWidget.prototype.getNodesByProperty = function (key, value) {\n        return this.tree.getNodesByProperty(key, value);\n    };\n    JqTreeWidget.prototype.getNodeByHtmlElement = function (element) {\n        return this._getNode(jQuery(element));\n    };\n    JqTreeWidget.prototype.getNodeByCallback = function (callback) {\n        return this.tree.getNodeByCallback(callback);\n    };\n    JqTreeWidget.prototype.openNode = function (node, param1, param2) {\n        var _this = this;\n        var parseParams = function () {\n            var on_finished;\n            var slide;\n            if (util_1.isFunction(param1)) {\n                on_finished = param1;\n                slide = null;\n            }\n            else {\n                slide = param1;\n                on_finished = param2;\n            }\n            if (slide == null) {\n                slide = _this.options.slide;\n            }\n            return [slide, on_finished];\n        };\n        var _a = parseParams(), slide = _a[0], on_finished = _a[1];\n        if (node) {\n            this._openNode(node, slide, on_finished);\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.closeNode = function (node, slide_param) {\n        var slide = slide_param == null ? this.options.slide : slide_param;\n        if (node.isFolder()) {\n            new node_element_1.FolderElement(node, this).close(slide, this.options.animationSpeed);\n            this._saveState();\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.isDragging = function () {\n        if (this.dnd_handler) {\n            return this.dnd_handler.is_dragging;\n        }\n        else {\n            return false;\n        }\n    };\n    JqTreeWidget.prototype.refreshHitAreas = function () {\n        if (this.dnd_handler) {\n            this.dnd_handler.refresh();\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.addNodeAfter = function (new_node_info, existing_node) {\n        var new_node = existing_node.addAfter(new_node_info);\n        if (new_node) {\n            this._refreshElements(existing_node.parent);\n        }\n        return new_node;\n    };\n    JqTreeWidget.prototype.addNodeBefore = function (new_node_info, existing_node) {\n        var new_node = existing_node.addBefore(new_node_info);\n        if (new_node) {\n            this._refreshElements(existing_node.parent);\n        }\n        return new_node;\n    };\n    JqTreeWidget.prototype.addParentNode = function (new_node_info, existing_node) {\n        var new_node = existing_node.addParent(new_node_info);\n        if (new_node) {\n            this._refreshElements(new_node.parent);\n        }\n        return new_node;\n    };\n    JqTreeWidget.prototype.removeNode = function (node) {\n        if (node.parent && this.select_node_handler) {\n            this.select_node_handler.removeFromSelection(node, true); // including children\n            node.remove();\n            this._refreshElements(node.parent);\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.appendNode = function (new_node_info, parent_node_param) {\n        var parent_node = parent_node_param || this.tree;\n        var node = parent_node.append(new_node_info);\n        this._refreshElements(parent_node);\n        return node;\n    };\n    JqTreeWidget.prototype.prependNode = function (new_node_info, parent_node_param) {\n        var parent_node = !parent_node_param ? this.tree : parent_node_param;\n        var node = parent_node.prepend(new_node_info);\n        this._refreshElements(parent_node);\n        return node;\n    };\n    JqTreeWidget.prototype.updateNode = function (node, data) {\n        var id_is_changed = data.id && data.id !== node.id;\n        if (id_is_changed) {\n            this.tree.removeNodeFromIndex(node);\n        }\n        node.setData(data);\n        if (id_is_changed) {\n            this.tree.addNodeToIndex(node);\n        }\n        if (typeof data === \"object\" && data.children) {\n            node.removeChildren();\n            if (data.children.length) {\n                node.loadFromData(data.children);\n            }\n        }\n        this.renderer.renderFromNode(node);\n        this._selectCurrentNode();\n        return this.element;\n    };\n    JqTreeWidget.prototype.moveNode = function (node, target_node, position) {\n        var position_index = node_1.getPosition(position);\n        this.tree.moveNode(node, target_node, position_index);\n        this._refreshElements(null);\n        return this.element;\n    };\n    JqTreeWidget.prototype.getStateFromStorage = function () {\n        if (this.save_state_handler) {\n            return this.save_state_handler.getStateFromStorage();\n        }\n    };\n    JqTreeWidget.prototype.addToSelection = function (node) {\n        if (node && this.select_node_handler) {\n            this.select_node_handler.addToSelection(node);\n            this._getNodeElementForNode(node).select();\n            this._saveState();\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.getSelectedNodes = function () {\n        if (!this.select_node_handler) {\n            return [];\n        }\n        else {\n            return this.select_node_handler.getSelectedNodes();\n        }\n    };\n    JqTreeWidget.prototype.isNodeSelected = function (node) {\n        if (!this.select_node_handler) {\n            return false;\n        }\n        else {\n            return this.select_node_handler.isNodeSelected(node);\n        }\n    };\n    JqTreeWidget.prototype.removeFromSelection = function (node) {\n        if (this.select_node_handler) {\n            this.select_node_handler.removeFromSelection(node);\n            this._getNodeElementForNode(node).deselect();\n            this._saveState();\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.scrollToNode = function (node) {\n        if (this.scroll_handler) {\n            var node_offset = jQuery(node.element).offset();\n            var node_top = node_offset ? node_offset.top : 0;\n            var tree_offset = this.$el.offset();\n            var tree_top = tree_offset ? tree_offset.top : 0;\n            var top_1 = node_top - tree_top;\n            this.scroll_handler.scrollToY(top_1);\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.getState = function () {\n        if (this.save_state_handler) {\n            return this.save_state_handler.getState();\n        }\n    };\n    JqTreeWidget.prototype.setState = function (state) {\n        if (this.save_state_handler) {\n            this.save_state_handler.setInitialState(state);\n            this._refreshElements(null);\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.setOption = function (option, value) {\n        this.options[option] = value;\n        return this.element;\n    };\n    JqTreeWidget.prototype.moveDown = function () {\n        if (this.key_handler) {\n            this.key_handler.moveDown();\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.moveUp = function () {\n        if (this.key_handler) {\n            this.key_handler.moveUp();\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.getVersion = function () {\n        return version_1[\"default\"];\n    };\n    JqTreeWidget.prototype.testGenerateHitAreas = function (moving_node) {\n        if (!this.dnd_handler) {\n            return [];\n        }\n        else {\n            this.dnd_handler.current_item = this._getNodeElementForNode(moving_node);\n            this.dnd_handler.generateHitAreas();\n            return this.dnd_handler.hit_areas;\n        }\n    };\n    JqTreeWidget.prototype._triggerEvent = function (event_name, values) {\n        var event = jQuery.Event(event_name);\n        jQuery.extend(event, values);\n        this.element.trigger(event);\n        return event;\n    };\n    JqTreeWidget.prototype._openNode = function (node, slide, on_finished) {\n        var _this = this;\n        if (slide === void 0) { slide = true; }\n        var doOpenNode = function (_node, _slide, _on_finished) {\n            var folder_element = new node_element_1.FolderElement(_node, _this);\n            folder_element.open(_on_finished, _slide, _this.options.animationSpeed);\n        };\n        if (node.isFolder()) {\n            if (node.load_on_demand) {\n                this._loadFolderOnDemand(node, slide, on_finished);\n            }\n            else {\n                var parent_1 = node.parent;\n                while (parent_1) {\n                    // nb: do not open root element\n                    if (parent_1.parent) {\n                        doOpenNode(parent_1, false, null);\n                    }\n                    parent_1 = parent_1.parent;\n                }\n                doOpenNode(node, slide, on_finished);\n                this._saveState();\n            }\n        }\n    };\n    /*\n    Redraw the tree or part of the tree.\n     from_node: redraw this subtree\n    */\n    JqTreeWidget.prototype._refreshElements = function (from_node) {\n        this.renderer.render(from_node);\n        this._triggerEvent(\"tree.refresh\");\n    };\n    JqTreeWidget.prototype._getNodeElementForNode = function (node) {\n        if (node.isFolder()) {\n            return new node_element_1.FolderElement(node, this);\n        }\n        else {\n            return new node_element_1.NodeElement(node, this);\n        }\n    };\n    JqTreeWidget.prototype._getNodeElement = function ($element) {\n        var node = this._getNode($element);\n        if (node) {\n            return this._getNodeElementForNode(node);\n        }\n        else {\n            return null;\n        }\n    };\n    JqTreeWidget.prototype._containsElement = function (element) {\n        var node = this._getNode(jQuery(element));\n        return node != null && node.tree === this.tree;\n    };\n    JqTreeWidget.prototype._getScrollLeft = function () {\n        return ((this.scroll_handler && this.scroll_handler.getScrollLeft()) || 0);\n    };\n    JqTreeWidget.prototype._init = function () {\n        _super.prototype._init.call(this);\n        this.element = this.$el;\n        this.mouse_delay = 300;\n        this.is_initialized = false;\n        this.options.rtl = this._getRtlOption();\n        if (this.options.closedIcon === null) {\n            this.options.closedIcon = this._getDefaultClosedIcon();\n        }\n        this.renderer = new elements_renderer_1[\"default\"](this);\n        if (save_state_handler_1[\"default\"] != null) {\n            this.save_state_handler = new save_state_handler_1[\"default\"](this);\n        }\n        else {\n            this.options.saveState = false;\n        }\n        if (select_node_handler_1[\"default\"] != null) {\n            this.select_node_handler = new select_node_handler_1[\"default\"](this);\n        }\n        if (drag_and_drop_handler_1.DragAndDropHandler != null) {\n            this.dnd_handler = new drag_and_drop_handler_1.DragAndDropHandler(this);\n        }\n        else {\n            this.options.dragAndDrop = false;\n        }\n        if (scroll_handler_1[\"default\"] != null) {\n            this.scroll_handler = new scroll_handler_1[\"default\"](this);\n        }\n        if (key_handler_1[\"default\"] != null && select_node_handler_1[\"default\"] != null) {\n            this.key_handler = new key_handler_1[\"default\"](this);\n        }\n        this._initData();\n        this.element.click(this._handleClick);\n        this.element.dblclick(this._handleDblclick);\n        if (this.options.useContextMenu) {\n            this.element.on(\"contextmenu\", this._handleContextmenu);\n        }\n    };\n    JqTreeWidget.prototype._deinit = function () {\n        this.element.empty();\n        this.element.off();\n        if (this.key_handler) {\n            this.key_handler.deinit();\n        }\n        this.tree = new node_1.Node({}, true);\n        _super.prototype._deinit.call(this);\n    };\n    JqTreeWidget.prototype._mouseCapture = function (position_info) {\n        if (this.options.dragAndDrop && this.dnd_handler) {\n            return this.dnd_handler.mouseCapture(position_info);\n        }\n        else {\n            return false;\n        }\n    };\n    JqTreeWidget.prototype._mouseStart = function (position_info) {\n        if (this.options.dragAndDrop && this.dnd_handler) {\n            return this.dnd_handler.mouseStart(position_info);\n        }\n        else {\n            return false;\n        }\n    };\n    JqTreeWidget.prototype._mouseDrag = function (position_info) {\n        if (this.options.dragAndDrop && this.dnd_handler) {\n            var result = this.dnd_handler.mouseDrag(position_info);\n            if (this.scroll_handler) {\n                this.scroll_handler.checkScrolling();\n            }\n            return result;\n        }\n        else {\n            return false;\n        }\n    };\n    JqTreeWidget.prototype._mouseStop = function (position_info) {\n        if (this.options.dragAndDrop && this.dnd_handler) {\n            return this.dnd_handler.mouseStop(position_info);\n        }\n        else {\n            return false;\n        }\n    };\n    JqTreeWidget.prototype._initData = function () {\n        if (this.options.data) {\n            this._loadData(this.options.data, null);\n        }\n        else {\n            var data_url = this._getDataUrlInfo(null);\n            if (data_url) {\n                this._loadDataFromUrl(null, null, null);\n            }\n            else {\n                this._loadData([], null);\n            }\n        }\n    };\n    JqTreeWidget.prototype._getDataUrlInfo = function (node) {\n        var _this = this;\n        var data_url = this.options.dataUrl || this.element.data(\"url\");\n        var getUrlFromString = function () {\n            var url_info = { url: data_url };\n            if (node && node.id) {\n                // Load on demand of a subtree; add node parameter\n                var data = { node: node.id };\n                // tslint:disable-next-line: no-string-literal\n                url_info[\"data\"] = data;\n            }\n            else {\n                // Add selected_node parameter\n                var selected_node_id = _this._getNodeIdToBeSelected();\n                if (selected_node_id) {\n                    var data = { selected_node: selected_node_id };\n                    // tslint:disable-next-line: no-string-literal\n                    url_info[\"data\"] = data;\n                }\n            }\n            return url_info;\n        };\n        if (typeof data_url === \"function\") {\n            return data_url(node);\n        }\n        else if (typeof data_url === \"string\") {\n            return getUrlFromString();\n        }\n        else {\n            return data_url;\n        }\n    };\n    JqTreeWidget.prototype._getNodeIdToBeSelected = function () {\n        if (this.options.saveState && this.save_state_handler) {\n            return this.save_state_handler.getNodeIdToBeSelected();\n        }\n        else {\n            return null;\n        }\n    };\n    JqTreeWidget.prototype._initTree = function (data) {\n        var _this = this;\n        var doInit = function () {\n            if (!_this.is_initialized) {\n                _this.is_initialized = true;\n                _this._triggerEvent(\"tree.init\");\n            }\n        };\n        this.tree = new this.options.nodeClass(null, true, this.options.nodeClass);\n        if (this.select_node_handler) {\n            this.select_node_handler.clear();\n        }\n        this.tree.loadFromData(data);\n        var must_load_on_demand = this._setInitialState();\n        this._refreshElements(null);\n        if (!must_load_on_demand) {\n            doInit();\n        }\n        else {\n            // Load data on demand and then init the tree\n            this._setInitialStateOnDemand(doInit);\n        }\n    };\n    // Set initial state, either by restoring the state or auto-opening nodes\n    // result: must load nodes on demand?\n    JqTreeWidget.prototype._setInitialState = function () {\n        var _this = this;\n        var restoreState = function () {\n            // result: is state restored, must load on demand?\n            if (!(_this.options.saveState && _this.save_state_handler)) {\n                return [false, false];\n            }\n            else {\n                var state = _this.save_state_handler.getStateFromStorage();\n                if (!state) {\n                    return [false, false];\n                }\n                else {\n                    var must_load_on_demand_1 = _this.save_state_handler.setInitialState(state);\n                    // return true: the state is restored\n                    return [true, must_load_on_demand_1];\n                }\n            }\n        };\n        var autoOpenNodes = function () {\n            // result: must load on demand?\n            if (_this.options.autoOpen === false) {\n                return false;\n            }\n            var max_level = _this._getAutoOpenMaxLevel();\n            var must_load_on_demand = false;\n            _this.tree.iterate(function (node, level) {\n                if (node.load_on_demand) {\n                    must_load_on_demand = true;\n                    return false;\n                }\n                else if (!node.hasChildren()) {\n                    return false;\n                }\n                else {\n                    node.is_open = true;\n                    return level !== max_level;\n                }\n            });\n            return must_load_on_demand;\n        };\n        // tslint:disable-next-line: prefer-const\n        var _a = restoreState(), is_restored = _a[0], must_load_on_demand = _a[1];\n        if (!is_restored) {\n            must_load_on_demand = autoOpenNodes();\n        }\n        return must_load_on_demand;\n    };\n    // Set the initial state for nodes that are loaded on demand\n    // Call cb_finished when done\n    JqTreeWidget.prototype._setInitialStateOnDemand = function (cb_finished) {\n        var _this = this;\n        var restoreState = function () {\n            if (!(_this.options.saveState && _this.save_state_handler)) {\n                return false;\n            }\n            else {\n                var state = _this.save_state_handler.getStateFromStorage();\n                if (!state) {\n                    return false;\n                }\n                else {\n                    _this.save_state_handler.setInitialStateOnDemand(state, cb_finished);\n                    return true;\n                }\n            }\n        };\n        var autoOpenNodes = function () {\n            var max_level = _this._getAutoOpenMaxLevel();\n            var loading_count = 0;\n            var loadAndOpenNode = function (node) {\n                loading_count += 1;\n                _this._openNode(node, false, function () {\n                    loading_count -= 1;\n                    openNodes();\n                });\n            };\n            var openNodes = function () {\n                _this.tree.iterate(function (node, level) {\n                    if (node.load_on_demand) {\n                        if (!node.is_loading) {\n                            loadAndOpenNode(node);\n                        }\n                        return false;\n                    }\n                    else {\n                        _this._openNode(node, false, null);\n                        return level !== max_level;\n                    }\n                });\n                if (loading_count === 0) {\n                    cb_finished();\n                }\n            };\n            openNodes();\n        };\n        if (!restoreState()) {\n            autoOpenNodes();\n        }\n    };\n    JqTreeWidget.prototype._getAutoOpenMaxLevel = function () {\n        if (this.options.autoOpen === true) {\n            return -1;\n        }\n        else {\n            return parseInt(this.options.autoOpen, 10);\n        }\n    };\n    JqTreeWidget.prototype._getClickTarget = function (element) {\n        var $target = jQuery(element);\n        var $button = $target.closest(\".jqtree-toggler\");\n        if ($button.length) {\n            var node = this._getNode($button);\n            if (node) {\n                return {\n                    type: \"button\",\n                    node: node\n                };\n            }\n        }\n        else {\n            var $el = $target.closest(\".jqtree-element\");\n            if ($el.length) {\n                var node = this._getNode($el);\n                if (node) {\n                    return {\n                        type: \"label\",\n                        node: node\n                    };\n                }\n            }\n        }\n        return null;\n    };\n    JqTreeWidget.prototype._getNode = function ($element) {\n        var $li = $element.closest(\"li.jqtree_common\");\n        if ($li.length === 0) {\n            return null;\n        }\n        else {\n            return $li.data(\"node\");\n        }\n    };\n    JqTreeWidget.prototype._saveState = function () {\n        if (this.options.saveState && this.save_state_handler) {\n            this.save_state_handler.saveState();\n        }\n    };\n    JqTreeWidget.prototype._selectCurrentNode = function () {\n        var node = this.getSelectedNode();\n        if (node) {\n            var node_element = this._getNodeElementForNode(node);\n            if (node_element) {\n                node_element.select();\n            }\n        }\n    };\n    JqTreeWidget.prototype._deselectCurrentNode = function () {\n        var node = this.getSelectedNode();\n        if (node) {\n            this.removeFromSelection(node);\n        }\n    };\n    JqTreeWidget.prototype._getDefaultClosedIcon = function () {\n        if (this.options.rtl) {\n            // triangle to the left\n            return \"&#x25c0;\";\n        }\n        else {\n            // triangle to the right\n            return \"&#x25ba;\";\n        }\n    };\n    JqTreeWidget.prototype._getRtlOption = function () {\n        if (this.options.rtl != null) {\n            return this.options.rtl;\n        }\n        else {\n            var data_rtl = this.element.data(\"rtl\");\n            if (data_rtl != null && data_rtl !== false) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n    };\n    JqTreeWidget.prototype._notifyLoading = function (is_loading, node, $el) {\n        if (this.options.onLoading) {\n            this.options.onLoading(is_loading, node, $el);\n        }\n    };\n    JqTreeWidget.prototype._selectNode = function (node, must_toggle) {\n        var _this = this;\n        if (must_toggle === void 0) { must_toggle = false; }\n        if (!this.select_node_handler) {\n            return;\n        }\n        var canSelect = function () {\n            if (_this.options.onCanSelectNode) {\n                return (_this.options.selectable &&\n                    _this.options.onCanSelectNode(node));\n            }\n            else {\n                return _this.options.selectable;\n            }\n        };\n        var openParents = function () {\n            var parent = node.parent;\n            if (parent && parent.parent && !parent.is_open) {\n                _this.openNode(parent, false);\n            }\n        };\n        var saveState = function () {\n            if (_this.options.saveState && _this.save_state_handler) {\n                _this.save_state_handler.saveState();\n            }\n        };\n        if (!node) {\n            // Called with empty node -> deselect current node\n            this._deselectCurrentNode();\n            saveState();\n            return;\n        }\n        if (!canSelect()) {\n            return;\n        }\n        if (this.select_node_handler.isNodeSelected(node)) {\n            if (must_toggle) {\n                this._deselectCurrentNode();\n                this._triggerEvent(\"tree.select\", {\n                    node: null,\n                    previous_node: node\n                });\n            }\n        }\n        else {\n            var deselected_node = this.getSelectedNode();\n            this._deselectCurrentNode();\n            this.addToSelection(node);\n            this._triggerEvent(\"tree.select\", {\n                node: node,\n                deselected_node: deselected_node\n            });\n            openParents();\n        }\n        saveState();\n    };\n    JqTreeWidget.prototype._loadData = function (data, parent_node) {\n        if (!data) {\n            return;\n        }\n        else {\n            this._triggerEvent(\"tree.load_data\", { tree_data: data });\n            if (parent_node) {\n                this._deselectNodes(parent_node);\n                this._loadSubtree(data, parent_node);\n            }\n            else {\n                this._initTree(data);\n            }\n            if (this.isDragging() && this.dnd_handler) {\n                this.dnd_handler.refresh();\n            }\n        }\n    };\n    JqTreeWidget.prototype._deselectNodes = function (parent_node) {\n        if (this.select_node_handler) {\n            var selected_nodes_under_parent = this.select_node_handler.getSelectedNodesUnder(parent_node);\n            for (var _i = 0, selected_nodes_under_parent_1 = selected_nodes_under_parent; _i < selected_nodes_under_parent_1.length; _i++) {\n                var n = selected_nodes_under_parent_1[_i];\n                this.select_node_handler.removeFromSelection(n);\n            }\n        }\n    };\n    JqTreeWidget.prototype._loadSubtree = function (data, parent_node) {\n        parent_node.loadFromData(data);\n        parent_node.load_on_demand = false;\n        parent_node.is_loading = false;\n        this._refreshElements(parent_node);\n    };\n    JqTreeWidget.prototype._loadDataFromUrl = function (url_info_param, parent_node, on_finished) {\n        var _this = this;\n        var $el = null;\n        var url_info = url_info_param;\n        var addLoadingClass = function () {\n            $el = parent_node ? jQuery(parent_node.element) : _this.element;\n            $el.addClass(\"jqtree-loading\");\n            _this._notifyLoading(true, parent_node, $el);\n        };\n        var removeLoadingClass = function () {\n            if ($el) {\n                $el.removeClass(\"jqtree-loading\");\n                _this._notifyLoading(false, parent_node, $el);\n            }\n        };\n        var parseUrlInfo = function () {\n            if (typeof url_info === \"string\") {\n                return { url: url_info };\n            }\n            if (!url_info.method) {\n                url_info.method = \"get\";\n            }\n            return url_info;\n        };\n        var handeLoadData = function (data) {\n            removeLoadingClass();\n            _this._loadData(data, parent_node);\n            if (on_finished && typeof on_finished === \"function\") {\n                on_finished();\n            }\n        };\n        var getDataFromResponse = function (response) {\n            return response instanceof Array || typeof response === \"object\"\n                ? response\n                : response != null ? jQuery.parseJSON(response) : [];\n        };\n        var filterData = function (data) {\n            return _this.options.dataFilter ? _this.options.dataFilter(data) : data;\n        };\n        var handleSuccess = function (response) {\n            var data = filterData(getDataFromResponse(response));\n            handeLoadData(data);\n        };\n        var handleError = function (response) {\n            removeLoadingClass();\n            if (_this.options.onLoadFailed) {\n                _this.options.onLoadFailed(response);\n            }\n        };\n        var loadDataFromUrlInfo = function () {\n            var _url_info = parseUrlInfo();\n            jQuery.ajax(jQuery.extend({}, _url_info, {\n                method: url_info.method != null\n                    ? url_info.method.toUpperCase()\n                    : \"GET\",\n                cache: false,\n                dataType: \"json\",\n                success: handleSuccess,\n                error: handleError\n            }));\n        };\n        if (!url_info_param) {\n            // Generate url for node\n            url_info = this._getDataUrlInfo(parent_node);\n        }\n        addLoadingClass();\n        if (!url_info) {\n            removeLoadingClass();\n            return;\n        }\n        else if (url_info instanceof Array) {\n            handeLoadData(url_info);\n            return;\n        }\n        else {\n            loadDataFromUrlInfo();\n            return;\n        }\n    };\n    JqTreeWidget.prototype._loadFolderOnDemand = function (node, slide, on_finished) {\n        var _this = this;\n        if (slide === void 0) { slide = true; }\n        node.is_loading = true;\n        this._loadDataFromUrl(null, node, function () {\n            _this._openNode(node, slide, on_finished);\n        });\n    };\n    JqTreeWidget.defaults = {\n        animationSpeed: \"fast\",\n        autoOpen: false,\n        saveState: false,\n        dragAndDrop: false,\n        selectable: true,\n        useContextMenu: true,\n        onCanSelectNode: null,\n        onSetStateFromStorage: null,\n        onGetStateFromStorage: null,\n        onCreateLi: null,\n        onIsMoveHandle: null,\n        // Can this node be moved?\n        onCanMove: null,\n        // Can this node be moved to this position? function(moved_node, target_node, position)\n        onCanMoveTo: null,\n        onLoadFailed: null,\n        autoEscape: true,\n        dataUrl: null,\n        // The symbol to use for a closed node - ► BLACK RIGHT-POINTING POINTER\n        // http://www.fileformat.info/info/unicode/char/25ba/index.htm\n        closedIcon: null,\n        // The symbol to use for an open node - ▼ BLACK DOWN-POINTING TRIANGLE\n        // http://www.fileformat.info/info/unicode/char/25bc/index.htm\n        openedIcon: \"&#x25bc;\",\n        slide: true,\n        nodeClass: node_1.Node,\n        dataFilter: null,\n        keyboardSupport: true,\n        openFolderDelay: 500,\n        rtl: false,\n        onDragMove: null,\n        onDragStop: null,\n        buttonLeft: true,\n        onLoading: null,\n        tabIndex: 0\n    };\n    return JqTreeWidget;\n}(mouse_widget_1[\"default\"]));\nsimple_widget_1[\"default\"].register(JqTreeWidget, \"tree\");\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/tree.jquery.ts\n// module id = 4\n// module chunks = 0 1","\"use strict\";\nexports.__esModule = true;\nvar version = \"1.4.4\";\nexports[\"default\"] = version;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/version.ts\n// module id = 5\n// module chunks = 0 1","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\nvar jQuery = require(\"jquery\");\nvar node_1 = require(\"./node\");\nvar util_1 = require(\"./util\");\nvar DragAndDropHandler = /** @class */ (function () {\n    function DragAndDropHandler(tree_widget) {\n        this.tree_widget = tree_widget;\n        this.hovered_area = null;\n        this.hit_areas = [];\n        this.is_dragging = false;\n        this.current_item = null;\n        this.position_info = null;\n    }\n    DragAndDropHandler.prototype.mouseCapture = function (position_info) {\n        var $element = jQuery(position_info.target);\n        if (!this.mustCaptureElement($element)) {\n            return null;\n        }\n        if (this.tree_widget.options.onIsMoveHandle &&\n            !this.tree_widget.options.onIsMoveHandle($element)) {\n            return null;\n        }\n        var node_element = this.tree_widget._getNodeElement($element);\n        if (node_element && this.tree_widget.options.onCanMove) {\n            if (!this.tree_widget.options.onCanMove(node_element.node)) {\n                node_element = null;\n            }\n        }\n        this.current_item = node_element;\n        return this.current_item != null;\n    };\n    DragAndDropHandler.prototype.generateHitAreas = function () {\n        if (!this.current_item) {\n            this.hit_areas = [];\n        }\n        else {\n            var hit_areas_generator = new HitAreasGenerator(this.tree_widget.tree, this.current_item.node, this.getTreeDimensions().bottom);\n            this.hit_areas = hit_areas_generator.generate();\n        }\n    };\n    DragAndDropHandler.prototype.mouseStart = function (position_info) {\n        if (!this.current_item) {\n            return false;\n        }\n        else {\n            this.refresh();\n            var offset = jQuery(position_info.target).offset();\n            var left = offset ? offset.left : 0;\n            var top_1 = offset ? offset.top : 0;\n            var node = this.current_item.node;\n            var node_name = this.tree_widget.options.autoEscape\n                ? util_1.html_escape(node.name)\n                : node.name;\n            this.drag_element = new DragElement(node_name, position_info.page_x - left, position_info.page_y - top_1, this.tree_widget.element);\n            this.is_dragging = true;\n            this.position_info = position_info;\n            this.current_item.$element.addClass(\"jqtree-moving\");\n            return true;\n        }\n    };\n    DragAndDropHandler.prototype.mouseDrag = function (position_info) {\n        if (!this.current_item || !this.drag_element) {\n            return false;\n        }\n        else {\n            this.drag_element.move(position_info.page_x, position_info.page_y);\n            this.position_info = position_info;\n            var area = this.findHoveredArea(position_info.page_x, position_info.page_y);\n            var can_move_to = this.canMoveToArea(area);\n            if (can_move_to && area) {\n                if (!area.node.isFolder()) {\n                    this.stopOpenFolderTimer();\n                }\n                if (this.hovered_area !== area) {\n                    this.hovered_area = area;\n                    // If this is a closed folder, start timer to open it\n                    if (this.mustOpenFolderTimer(area)) {\n                        this.startOpenFolderTimer(area.node);\n                    }\n                    else {\n                        this.stopOpenFolderTimer();\n                    }\n                    this.updateDropHint();\n                }\n            }\n            else {\n                this.removeHover();\n                this.removeDropHint();\n                this.stopOpenFolderTimer();\n            }\n            if (!area) {\n                if (this.tree_widget.options.onDragMove) {\n                    this.tree_widget.options.onDragMove(this.current_item.node, position_info.original_event);\n                }\n            }\n            return true;\n        }\n    };\n    DragAndDropHandler.prototype.mouseStop = function (position_info) {\n        this.moveItem(position_info);\n        this.clear();\n        this.removeHover();\n        this.removeDropHint();\n        this.removeHitAreas();\n        var current_item = this.current_item;\n        if (this.current_item) {\n            this.current_item.$element.removeClass(\"jqtree-moving\");\n            this.current_item = null;\n        }\n        this.is_dragging = false;\n        this.position_info = null;\n        if (!this.hovered_area && current_item) {\n            if (this.tree_widget.options.onDragStop) {\n                this.tree_widget.options.onDragStop(current_item.node, position_info.original_event);\n            }\n        }\n        return false;\n    };\n    DragAndDropHandler.prototype.refresh = function () {\n        this.removeHitAreas();\n        if (this.current_item) {\n            this.generateHitAreas();\n            this.current_item = this.tree_widget._getNodeElementForNode(this.current_item.node);\n            if (this.is_dragging) {\n                this.current_item.$element.addClass(\"jqtree-moving\");\n            }\n        }\n    };\n    DragAndDropHandler.prototype.mustCaptureElement = function ($element) {\n        return !$element.is(\"input,select,textarea\");\n    };\n    DragAndDropHandler.prototype.canMoveToArea = function (area) {\n        if (!area || !this.current_item) {\n            return false;\n        }\n        else if (this.tree_widget.options.onCanMoveTo) {\n            var position_name = node_1.getPositionName(area.position);\n            return this.tree_widget.options.onCanMoveTo(this.current_item.node, area.node, position_name);\n        }\n        else {\n            return true;\n        }\n    };\n    DragAndDropHandler.prototype.removeHitAreas = function () {\n        this.hit_areas = [];\n    };\n    DragAndDropHandler.prototype.clear = function () {\n        if (this.drag_element) {\n            this.drag_element.remove();\n            this.drag_element = null;\n        }\n    };\n    DragAndDropHandler.prototype.removeDropHint = function () {\n        if (this.previous_ghost) {\n            this.previous_ghost.remove();\n        }\n    };\n    DragAndDropHandler.prototype.removeHover = function () {\n        this.hovered_area = null;\n    };\n    DragAndDropHandler.prototype.findHoveredArea = function (x, y) {\n        var dimensions = this.getTreeDimensions();\n        if (x < dimensions.left ||\n            y < dimensions.top ||\n            x > dimensions.right ||\n            y > dimensions.bottom) {\n            return null;\n        }\n        var low = 0;\n        var high = this.hit_areas.length;\n        while (low < high) {\n            // tslint:disable-next-line: no-bitwise\n            var mid = (low + high) >> 1;\n            var area = this.hit_areas[mid];\n            if (y < area.top) {\n                high = mid;\n            }\n            else if (y > area.bottom) {\n                low = mid + 1;\n            }\n            else {\n                return area;\n            }\n        }\n        return null;\n    };\n    DragAndDropHandler.prototype.mustOpenFolderTimer = function (area) {\n        var node = area.node;\n        return (node.isFolder() &&\n            !node.is_open &&\n            area.position === node_1.Position.Inside);\n    };\n    DragAndDropHandler.prototype.updateDropHint = function () {\n        if (!this.hovered_area) {\n            return;\n        }\n        // remove previous drop hint\n        this.removeDropHint();\n        // add new drop hint\n        var node_element = this.tree_widget._getNodeElementForNode(this.hovered_area.node);\n        this.previous_ghost = node_element.addDropHint(this.hovered_area.position);\n    };\n    DragAndDropHandler.prototype.startOpenFolderTimer = function (folder) {\n        var _this = this;\n        var openFolder = function () {\n            _this.tree_widget._openNode(folder, _this.tree_widget.options.slide, function () {\n                _this.refresh();\n                _this.updateDropHint();\n            });\n        };\n        this.stopOpenFolderTimer();\n        this.open_folder_timer = setTimeout(openFolder, this.tree_widget.options.openFolderDelay);\n    };\n    DragAndDropHandler.prototype.stopOpenFolderTimer = function () {\n        if (this.open_folder_timer) {\n            clearTimeout(this.open_folder_timer);\n            this.open_folder_timer = null;\n        }\n    };\n    DragAndDropHandler.prototype.moveItem = function (position_info) {\n        var _this = this;\n        if (this.current_item &&\n            this.hovered_area &&\n            this.hovered_area.position !== node_1.Position.None &&\n            this.canMoveToArea(this.hovered_area)) {\n            var moved_node_1 = this.current_item.node;\n            var target_node_1 = this.hovered_area.node;\n            var position_1 = this.hovered_area.position;\n            var previous_parent = moved_node_1.parent;\n            if (position_1 === node_1.Position.Inside) {\n                this.hovered_area.node.is_open = true;\n            }\n            var doMove = function () {\n                _this.tree_widget.tree.moveNode(moved_node_1, target_node_1, position_1);\n                _this.tree_widget.element.empty();\n                _this.tree_widget._refreshElements(null);\n            };\n            var event_1 = this.tree_widget._triggerEvent(\"tree.move\", {\n                move_info: {\n                    moved_node: moved_node_1,\n                    target_node: target_node_1,\n                    position: node_1.getPositionName(position_1),\n                    previous_parent: previous_parent,\n                    do_move: doMove,\n                    original_event: position_info.original_event\n                }\n            });\n            if (!event_1.isDefaultPrevented()) {\n                doMove();\n            }\n        }\n    };\n    DragAndDropHandler.prototype.getTreeDimensions = function () {\n        // Return the dimensions of the tree. Add a margin to the bottom to allow\n        // to drag-and-drop after the last element.\n        var offset = this.tree_widget.element.offset();\n        if (!offset) {\n            return { left: 0, top: 0, right: 0, bottom: 0 };\n        }\n        else {\n            var el = this.tree_widget.element;\n            var width = el.width() || 0;\n            var height = el.height() || 0;\n            var left = offset.left + this.tree_widget._getScrollLeft();\n            return {\n                left: left,\n                top: offset.top,\n                right: left + width,\n                bottom: offset.top + height + 16\n            };\n        }\n    };\n    return DragAndDropHandler;\n}());\nexports.DragAndDropHandler = DragAndDropHandler;\nvar VisibleNodeIterator = /** @class */ (function () {\n    function VisibleNodeIterator(tree) {\n        this.tree = tree;\n    }\n    VisibleNodeIterator.prototype.iterate = function () {\n        var _this = this;\n        var is_first_node = true;\n        var _iterateNode = function (node, next_node) {\n            var must_iterate_inside = (node.is_open || !node.element) && node.hasChildren();\n            var $element = null;\n            if (node.element) {\n                $element = jQuery(node.element);\n                if (!$element.is(\":visible\")) {\n                    return;\n                }\n                if (is_first_node) {\n                    _this.handleFirstNode(node);\n                    is_first_node = false;\n                }\n                if (!node.hasChildren()) {\n                    _this.handleNode(node, next_node, $element);\n                }\n                else if (node.is_open) {\n                    if (!_this.handleOpenFolder(node, $element)) {\n                        must_iterate_inside = false;\n                    }\n                }\n                else {\n                    _this.handleClosedFolder(node, next_node, $element);\n                }\n            }\n            if (must_iterate_inside) {\n                var children_length_1 = node.children.length;\n                node.children.forEach(function (_, i) {\n                    if (i === children_length_1 - 1) {\n                        _iterateNode(node.children[i], null);\n                    }\n                    else {\n                        _iterateNode(node.children[i], node.children[i + 1]);\n                    }\n                });\n                if (node.is_open && $element) {\n                    _this.handleAfterOpenFolder(node, next_node);\n                }\n            }\n        };\n        _iterateNode(this.tree, null);\n    };\n    return VisibleNodeIterator;\n}());\nvar HitAreasGenerator = /** @class */ (function (_super) {\n    __extends(HitAreasGenerator, _super);\n    function HitAreasGenerator(tree, current_node, tree_bottom) {\n        var _this = _super.call(this, tree) || this;\n        _this.current_node = current_node;\n        _this.tree_bottom = tree_bottom;\n        return _this;\n    }\n    HitAreasGenerator.prototype.generate = function () {\n        this.positions = [];\n        this.last_top = 0;\n        this.iterate();\n        return this.generateHitAreas(this.positions);\n    };\n    HitAreasGenerator.prototype.generateHitAreas = function (positions) {\n        var previous_top = -1;\n        var group = [];\n        var hit_areas = [];\n        for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\n            var position = positions_1[_i];\n            if (position.top !== previous_top && group.length) {\n                if (group.length) {\n                    this.generateHitAreasForGroup(hit_areas, group, previous_top, position.top);\n                }\n                previous_top = position.top;\n                group = [];\n            }\n            group.push(position);\n        }\n        this.generateHitAreasForGroup(hit_areas, group, previous_top, this.tree_bottom);\n        return hit_areas;\n    };\n    HitAreasGenerator.prototype.handleOpenFolder = function (node, $element) {\n        if (node === this.current_node) {\n            // Cannot move inside current item\n            // Stop iterating\n            return false;\n        }\n        // Cannot move before current item\n        if (node.children[0] !== this.current_node) {\n            this.addPosition(node, node_1.Position.Inside, this.getTop($element));\n        }\n        // Continue iterating\n        return true;\n    };\n    HitAreasGenerator.prototype.handleClosedFolder = function (node, next_node, $element) {\n        var top = this.getTop($element);\n        if (node === this.current_node) {\n            // Cannot move after current item\n            this.addPosition(node, node_1.Position.None, top);\n        }\n        else {\n            this.addPosition(node, node_1.Position.Inside, top);\n            // Cannot move before current item\n            if (next_node !== this.current_node) {\n                this.addPosition(node, node_1.Position.After, top);\n            }\n        }\n    };\n    HitAreasGenerator.prototype.handleFirstNode = function (node) {\n        if (node !== this.current_node) {\n            this.addPosition(node, node_1.Position.Before, this.getTop(jQuery(node.element)));\n        }\n    };\n    HitAreasGenerator.prototype.handleAfterOpenFolder = function (node, next_node) {\n        if (node === this.current_node || next_node === this.current_node) {\n            // Cannot move before or after current item\n            this.addPosition(node, node_1.Position.None, this.last_top);\n        }\n        else {\n            this.addPosition(node, node_1.Position.After, this.last_top);\n        }\n    };\n    HitAreasGenerator.prototype.handleNode = function (node, next_node, $element) {\n        var top = this.getTop($element);\n        if (node === this.current_node) {\n            // Cannot move inside current item\n            this.addPosition(node, node_1.Position.None, top);\n        }\n        else {\n            this.addPosition(node, node_1.Position.Inside, top);\n        }\n        if (next_node === this.current_node || node === this.current_node) {\n            // Cannot move before or after current item\n            this.addPosition(node, node_1.Position.None, top);\n        }\n        else {\n            this.addPosition(node, node_1.Position.After, top);\n        }\n    };\n    HitAreasGenerator.prototype.getTop = function ($element) {\n        var offset = $element.offset();\n        return offset ? offset.top : 0;\n    };\n    HitAreasGenerator.prototype.addPosition = function (node, position, top) {\n        var area = {\n            top: top,\n            bottom: 0,\n            node: node,\n            position: position\n        };\n        this.positions.push(area);\n        this.last_top = top;\n    };\n    HitAreasGenerator.prototype.generateHitAreasForGroup = function (hit_areas, positions_in_group, top, bottom) {\n        // limit positions in group\n        var position_count = Math.min(positions_in_group.length, 4);\n        var area_height = Math.round((bottom - top) / position_count);\n        var area_top = top;\n        var i = 0;\n        while (i < position_count) {\n            var position = positions_in_group[i];\n            hit_areas.push({\n                top: area_top,\n                bottom: area_top + area_height,\n                node: position.node,\n                position: position.position\n            });\n            area_top += area_height;\n            i += 1;\n        }\n    };\n    return HitAreasGenerator;\n}(VisibleNodeIterator));\nexports.HitAreasGenerator = HitAreasGenerator;\nvar DragElement = /** @class */ (function () {\n    function DragElement(node_name, offset_x, offset_y, $tree) {\n        this.offset_x = offset_x;\n        this.offset_y = offset_y;\n        this.$element = jQuery(\"<span class=\\\"jqtree-title jqtree-dragging\\\">\" + node_name + \"</span>\");\n        this.$element.css(\"position\", \"absolute\");\n        $tree.append(this.$element);\n    }\n    DragElement.prototype.move = function (page_x, page_y) {\n        this.$element.offset({\n            left: page_x - this.offset_x,\n            top: page_y - this.offset_y\n        });\n    };\n    DragElement.prototype.remove = function () {\n        this.$element.remove();\n    };\n    return DragElement;\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/drag_and_drop_handler.ts\n// module id = 6\n// module chunks = 0 1","\"use strict\";\nexports.__esModule = true;\nvar util_1 = require(\"./util\");\nvar ElementsRenderer = /** @class */ (function () {\n    function ElementsRenderer(tree_widget) {\n        this.tree_widget = tree_widget;\n        this.opened_icon_element = this.createButtonElement(tree_widget.options.openedIcon);\n        this.closed_icon_element = this.createButtonElement(tree_widget.options.closedIcon);\n    }\n    ElementsRenderer.prototype.render = function (from_node) {\n        if (from_node && from_node.parent) {\n            this.renderFromNode(from_node);\n        }\n        else {\n            this.renderFromRoot();\n        }\n    };\n    ElementsRenderer.prototype.renderFromRoot = function () {\n        var $element = this.tree_widget.element;\n        $element.empty();\n        this.createDomElements($element[0], this.tree_widget.tree.children, true, 1);\n    };\n    ElementsRenderer.prototype.renderFromNode = function (node) {\n        // remember current li\n        var $previous_li = jQuery(node.element);\n        // create element\n        var li = this.createLi(node, node.getLevel());\n        this.attachNodeData(node, li);\n        // add element to dom\n        $previous_li.after(li);\n        // remove previous li\n        $previous_li.remove();\n        // create children\n        if (node.children) {\n            this.createDomElements(li, node.children, false, node.getLevel() + 1);\n        }\n    };\n    ElementsRenderer.prototype.createDomElements = function (element, children, is_root_node, level) {\n        var ul = this.createUl(is_root_node);\n        element.appendChild(ul);\n        for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\n            var child = children_1[_i];\n            var li = this.createLi(child, level);\n            ul.appendChild(li);\n            this.attachNodeData(child, li);\n            if (child.hasChildren()) {\n                this.createDomElements(li, child.children, false, level + 1);\n            }\n        }\n    };\n    ElementsRenderer.prototype.attachNodeData = function (node, li) {\n        node.element = li;\n        jQuery(li).data(\"node\", node);\n    };\n    ElementsRenderer.prototype.createUl = function (is_root_node) {\n        var class_string;\n        var role;\n        if (!is_root_node) {\n            class_string = \"\";\n            role = \"group\";\n        }\n        else {\n            class_string = \"jqtree-tree\";\n            role = \"tree\";\n            if (this.tree_widget.options.rtl) {\n                class_string += \" jqtree-rtl\";\n            }\n        }\n        var ul = document.createElement(\"ul\");\n        ul.className = \"jqtree_common \" + class_string;\n        ul.setAttribute(\"role\", role);\n        return ul;\n    };\n    ElementsRenderer.prototype.createLi = function (node, level) {\n        var is_selected = Boolean(this.tree_widget.select_node_handler &&\n            this.tree_widget.select_node_handler.isNodeSelected(node));\n        var li = node.isFolder()\n            ? this.createFolderLi(node, level, is_selected)\n            : this.createNodeLi(node, level, is_selected);\n        if (this.tree_widget.options.onCreateLi) {\n            this.tree_widget.options.onCreateLi(node, jQuery(li), is_selected);\n        }\n        return li;\n    };\n    ElementsRenderer.prototype.createFolderLi = function (node, level, is_selected) {\n        var button_classes = this.getButtonClasses(node);\n        var folder_classes = this.getFolderClasses(node, is_selected);\n        var icon_element = node.is_open\n            ? this.opened_icon_element\n            : this.closed_icon_element;\n        // li\n        var li = document.createElement(\"li\");\n        li.className = \"jqtree_common \" + folder_classes;\n        li.setAttribute(\"role\", \"presentation\");\n        // div\n        var div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"presentation\");\n        li.appendChild(div);\n        // button link\n        var button_link = document.createElement(\"a\");\n        button_link.className = button_classes;\n        button_link.appendChild(icon_element.cloneNode(true));\n        button_link.setAttribute(\"role\", \"presentation\");\n        button_link.setAttribute(\"aria-hidden\", \"true\");\n        if (this.tree_widget.options.buttonLeft) {\n            div.appendChild(button_link);\n        }\n        // title span\n        div.appendChild(this.createTitleSpan(node.name, level, is_selected, node.is_open, true));\n        if (!this.tree_widget.options.buttonLeft) {\n            div.appendChild(button_link);\n        }\n        return li;\n    };\n    ElementsRenderer.prototype.createNodeLi = function (node, level, is_selected) {\n        var li_classes = [\"jqtree_common\"];\n        if (is_selected) {\n            li_classes.push(\"jqtree-selected\");\n        }\n        var class_string = li_classes.join(\" \");\n        // li\n        var li = document.createElement(\"li\");\n        li.className = class_string;\n        li.setAttribute(\"role\", \"presentation\");\n        // div\n        var div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"presentation\");\n        li.appendChild(div);\n        // title span\n        div.appendChild(this.createTitleSpan(node.name, level, is_selected, node.is_open, false));\n        return li;\n    };\n    ElementsRenderer.prototype.createTitleSpan = function (node_name, level, is_selected, is_open, is_folder) {\n        var title_span = document.createElement(\"span\");\n        var classes = \"jqtree-title jqtree_common\";\n        if (is_folder) {\n            classes += \" jqtree-title-folder\";\n        }\n        title_span.className = classes;\n        title_span.setAttribute(\"role\", \"treeitem\");\n        title_span.setAttribute(\"aria-level\", \"\" + level);\n        title_span.setAttribute(\"aria-selected\", util_1.getBoolString(is_selected));\n        title_span.setAttribute(\"aria-expanded\", util_1.getBoolString(is_open));\n        if (is_selected) {\n            title_span.setAttribute(\"tabindex\", this.tree_widget.options.tabIndex);\n        }\n        title_span.innerHTML = this.escapeIfNecessary(node_name);\n        return title_span;\n    };\n    ElementsRenderer.prototype.getButtonClasses = function (node) {\n        var classes = [\"jqtree-toggler\", \"jqtree_common\"];\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n        if (this.tree_widget.options.buttonLeft) {\n            classes.push(\"jqtree-toggler-left\");\n        }\n        else {\n            classes.push(\"jqtree-toggler-right\");\n        }\n        return classes.join(\" \");\n    };\n    ElementsRenderer.prototype.getFolderClasses = function (node, is_selected) {\n        var classes = [\"jqtree-folder\"];\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n        if (is_selected) {\n            classes.push(\"jqtree-selected\");\n        }\n        if (node.is_loading) {\n            classes.push(\"jqtree-loading\");\n        }\n        return classes.join(\" \");\n    };\n    ElementsRenderer.prototype.escapeIfNecessary = function (value) {\n        if (this.tree_widget.options.autoEscape) {\n            return util_1.html_escape(value);\n        }\n        else {\n            return value;\n        }\n    };\n    ElementsRenderer.prototype.createButtonElement = function (value) {\n        if (typeof value === \"string\") {\n            // convert value to html\n            var div = document.createElement(\"div\");\n            div.innerHTML = value;\n            return document.createTextNode(div.innerHTML);\n        }\n        else {\n            return jQuery(value)[0];\n        }\n    };\n    return ElementsRenderer;\n}());\nexports[\"default\"] = ElementsRenderer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/elements_renderer.ts\n// module id = 7\n// module chunks = 0 1","\"use strict\";\nexports.__esModule = true;\nvar KeyHandler = /** @class */ (function () {\n    function KeyHandler(tree_widget) {\n        var _this = this;\n        this.handleKeyDown = function (e) {\n            if (!_this.canHandleKeyboard()) {\n                return true;\n            }\n            else {\n                var key = e.which;\n                switch (key) {\n                    case KeyHandler.DOWN:\n                        return _this.moveDown();\n                    case KeyHandler.UP:\n                        return _this.moveUp();\n                    case KeyHandler.RIGHT:\n                        return _this.moveRight();\n                    case KeyHandler.LEFT:\n                        return _this.moveLeft();\n                    default:\n                        return true;\n                }\n            }\n        };\n        this.tree_widget = tree_widget;\n        if (tree_widget.options.keyboardSupport) {\n            jQuery(document).on(\"keydown.jqtree\", this.handleKeyDown);\n        }\n    }\n    KeyHandler.prototype.deinit = function () {\n        jQuery(document).off(\"keydown.jqtree\");\n    };\n    KeyHandler.prototype.moveDown = function () {\n        var node = this.tree_widget.getSelectedNode();\n        if (node) {\n            return this.selectNode(node.getNextNode());\n        }\n        else {\n            return false;\n        }\n    };\n    KeyHandler.prototype.moveUp = function () {\n        var node = this.tree_widget.getSelectedNode();\n        if (node) {\n            return this.selectNode(node.getPreviousNode());\n        }\n        else {\n            return false;\n        }\n    };\n    KeyHandler.prototype.moveRight = function () {\n        var node = this.tree_widget.getSelectedNode();\n        if (!node) {\n            return true;\n        }\n        else if (!node.isFolder()) {\n            return true;\n        }\n        else {\n            // folder node\n            if (node.is_open) {\n                // Right moves to the first child of an open node\n                return this.selectNode(node.getNextNode());\n            }\n            else {\n                // Right expands a closed node\n                this.tree_widget.openNode(node);\n                return false;\n            }\n        }\n    };\n    KeyHandler.prototype.moveLeft = function () {\n        var node = this.tree_widget.getSelectedNode();\n        if (!node) {\n            return true;\n        }\n        else if (node.isFolder() && node.is_open) {\n            // Left on an open node closes the node\n            this.tree_widget.closeNode(node);\n            return false;\n        }\n        else {\n            // Left on a closed or end node moves focus to the node's parent\n            return this.selectNode(node.getParent());\n        }\n    };\n    KeyHandler.prototype.selectNode = function (node) {\n        if (!node) {\n            return true;\n        }\n        else {\n            this.tree_widget.selectNode(node);\n            if (this.tree_widget.scroll_handler &&\n                !this.tree_widget.scroll_handler.isScrolledIntoView(jQuery(node.element).find(\".jqtree-element\"))) {\n                this.tree_widget.scrollToNode(node);\n            }\n            return false;\n        }\n    };\n    KeyHandler.prototype.canHandleKeyboard = function () {\n        return (this.tree_widget.options.keyboardSupport &&\n            this.isFocusOnTree() &&\n            this.tree_widget.getSelectedNode() != null);\n    };\n    KeyHandler.prototype.isFocusOnTree = function () {\n        var active_element = document.activeElement;\n        return (active_element &&\n            active_element.tagName === \"SPAN\" &&\n            this.tree_widget._containsElement(active_element));\n    };\n    KeyHandler.LEFT = 37;\n    KeyHandler.UP = 38;\n    KeyHandler.RIGHT = 39;\n    KeyHandler.DOWN = 40;\n    return KeyHandler;\n}());\nexports[\"default\"] = KeyHandler;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/key_handler.ts\n// module id = 8\n// module chunks = 0 1","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\n/*\nThis widget does the same a the mouse widget in jqueryui.\n*/\nvar simple_widget_1 = require(\"./simple.widget\");\nvar MouseWidget = /** @class */ (function (_super) {\n    __extends(MouseWidget, _super);\n    function MouseWidget() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.mouseDown = function (e) {\n            // Is left mouse button?\n            if (e.which !== 1) {\n                return;\n            }\n            var result = _this._handleMouseDown(_this._getPositionInfo(e));\n            if (result) {\n                e.preventDefault();\n            }\n            return result;\n        };\n        _this.mouseMove = function (e) {\n            return _this._handleMouseMove(e, _this._getPositionInfo(e));\n        };\n        _this.mouseUp = function (e) {\n            return _this._handleMouseUp(_this._getPositionInfo(e));\n        };\n        _this.touchStart = function (e) {\n            var touch_event = e.originalEvent;\n            if (touch_event.touches.length > 1) {\n                return;\n            }\n            var touch = touch_event.changedTouches[0];\n            return _this._handleMouseDown(_this._getPositionInfo(touch));\n        };\n        _this.touchMove = function (e) {\n            var touch_event = e.originalEvent;\n            if (touch_event.touches.length > 1) {\n                return;\n            }\n            var touch = touch_event.changedTouches[0];\n            return _this._handleMouseMove(e, _this._getPositionInfo(touch));\n        };\n        _this.touchEnd = function (e) {\n            var touch_event = e.originalEvent;\n            if (touch_event.touches.length > 1) {\n                return;\n            }\n            var touch = touch_event.changedTouches[0];\n            return _this._handleMouseUp(_this._getPositionInfo(touch));\n        };\n        return _this;\n    }\n    MouseWidget.prototype.setMouseDelay = function (mouse_delay) {\n        this.mouse_delay = mouse_delay;\n    };\n    MouseWidget.prototype._init = function () {\n        this.$el.on(\"mousedown.mousewidget\", this.mouseDown);\n        this.$el.on(\"touchstart.mousewidget\", this.touchStart);\n        this.is_mouse_started = false;\n        this.mouse_delay = 0;\n        this._mouse_delay_timer = null;\n        this._is_mouse_delay_met = true;\n        this.mouse_down_info = null;\n    };\n    MouseWidget.prototype._deinit = function () {\n        this.$el.off(\"mousedown.mousewidget\");\n        this.$el.off(\"touchstart.mousewidget\");\n        var $document = jQuery(document);\n        $document.off(\"mousemove.mousewidget\");\n        $document.off(\"mouseup.mousewidget\");\n    };\n    MouseWidget.prototype._handleMouseDown = function (position_info) {\n        // We may have missed mouseup (out of window)\n        if (this.is_mouse_started) {\n            this._handleMouseUp(position_info);\n        }\n        this.mouse_down_info = position_info;\n        if (!this._mouseCapture(position_info)) {\n            return;\n        }\n        this._handleStartMouse();\n        return true;\n    };\n    MouseWidget.prototype._handleStartMouse = function () {\n        var $document = jQuery(document);\n        $document.on(\"mousemove.mousewidget\", this.mouseMove);\n        $document.on(\"touchmove.mousewidget\", this.touchMove);\n        $document.on(\"mouseup.mousewidget\", this.mouseUp);\n        $document.on(\"touchend.mousewidget\", this.touchEnd);\n        if (this.mouse_delay) {\n            this._startMouseDelayTimer();\n        }\n    };\n    MouseWidget.prototype._startMouseDelayTimer = function () {\n        var _this = this;\n        if (this._mouse_delay_timer) {\n            clearTimeout(this._mouse_delay_timer);\n        }\n        this._mouse_delay_timer = setTimeout(function () {\n            _this._is_mouse_delay_met = true;\n        }, this.mouse_delay);\n        this._is_mouse_delay_met = false;\n    };\n    MouseWidget.prototype._handleMouseMove = function (e, position_info) {\n        if (this.is_mouse_started) {\n            this._mouseDrag(position_info);\n            return e.preventDefault();\n        }\n        if (this.mouse_delay && !this._is_mouse_delay_met) {\n            return true;\n        }\n        if (this.mouse_down_info) {\n            this.is_mouse_started =\n                this._mouseStart(this.mouse_down_info) !== false;\n        }\n        if (this.is_mouse_started) {\n            this._mouseDrag(position_info);\n        }\n        else {\n            this._handleMouseUp(position_info);\n        }\n        return !this.is_mouse_started;\n    };\n    MouseWidget.prototype._getPositionInfo = function (e) {\n        return {\n            page_x: e.pageX,\n            page_y: e.pageY,\n            target: e.target,\n            original_event: e\n        };\n    };\n    MouseWidget.prototype._handleMouseUp = function (position_info) {\n        var $document = jQuery(document);\n        $document.off(\"mousemove.mousewidget\");\n        $document.off(\"touchmove.mousewidget\");\n        $document.off(\"mouseup.mousewidget\");\n        $document.off(\"touchend.mousewidget\");\n        if (this.is_mouse_started) {\n            this.is_mouse_started = false;\n            this._mouseStop(position_info);\n        }\n    };\n    return MouseWidget;\n}(simple_widget_1[\"default\"]));\nexports[\"default\"] = MouseWidget;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mouse.widget.ts\n// module id = 9\n// module chunks = 0 1","\"use strict\";\nexports.__esModule = true;\nvar util_1 = require(\"./util\");\nvar SaveStateHandler = /** @class */ (function () {\n    function SaveStateHandler(tree_widget) {\n        this.tree_widget = tree_widget;\n    }\n    SaveStateHandler.prototype.saveState = function () {\n        var state = JSON.stringify(this.getState());\n        if (this.tree_widget.options.onSetStateFromStorage) {\n            this.tree_widget.options.onSetStateFromStorage(state);\n        }\n        else if (this.supportsLocalStorage()) {\n            localStorage.setItem(this.getKeyName(), state);\n        }\n    };\n    SaveStateHandler.prototype.getStateFromStorage = function () {\n        var json_data = this._loadFromStorage();\n        if (json_data) {\n            return this._parseState(json_data);\n        }\n        else {\n            return null;\n        }\n    };\n    SaveStateHandler.prototype.getState = function () {\n        var _this = this;\n        var getOpenNodeIds = function () {\n            var open_nodes = [];\n            _this.tree_widget.tree.iterate(function (node) {\n                if (node.is_open && node.id && node.hasChildren()) {\n                    open_nodes.push(node.id);\n                }\n                return true;\n            });\n            return open_nodes;\n        };\n        var getSelectedNodeIds = function () {\n            return _this.tree_widget.getSelectedNodes().map(function (n) { return n.id; });\n        };\n        return {\n            open_nodes: getOpenNodeIds(),\n            selected_node: getSelectedNodeIds()\n        };\n    };\n    /*\n    Set initial state\n    Don't handle nodes that are loaded on demand\n\n    result: must load on demand\n    */\n    SaveStateHandler.prototype.setInitialState = function (state) {\n        if (!state) {\n            return false;\n        }\n        else {\n            var must_load_on_demand = false;\n            if (state.open_nodes) {\n                must_load_on_demand = this._openInitialNodes(state.open_nodes);\n            }\n            if (state.selected_node) {\n                this._resetSelection();\n                this._selectInitialNodes(state.selected_node);\n            }\n            return must_load_on_demand;\n        }\n    };\n    SaveStateHandler.prototype.setInitialStateOnDemand = function (state, cb_finished) {\n        if (state) {\n            this._setInitialStateOnDemand(state.open_nodes, state.selected_node, cb_finished);\n        }\n        else {\n            cb_finished();\n        }\n    };\n    SaveStateHandler.prototype.getNodeIdToBeSelected = function () {\n        var state = this.getStateFromStorage();\n        if (state && state.selected_node) {\n            return state.selected_node[0];\n        }\n        else {\n            return null;\n        }\n    };\n    SaveStateHandler.prototype._parseState = function (json_data) {\n        var state = jQuery.parseJSON(json_data);\n        // Check if selected_node is an int (instead of an array)\n        if (state && state.selected_node && util_1.isInt(state.selected_node)) {\n            // Convert to array\n            state.selected_node = [state.selected_node];\n        }\n        return state;\n    };\n    SaveStateHandler.prototype._loadFromStorage = function () {\n        if (this.tree_widget.options.onGetStateFromStorage) {\n            return this.tree_widget.options.onGetStateFromStorage();\n        }\n        else if (this.supportsLocalStorage()) {\n            return localStorage.getItem(this.getKeyName());\n        }\n    };\n    SaveStateHandler.prototype._openInitialNodes = function (node_ids) {\n        var must_load_on_demand = false;\n        for (var _i = 0, node_ids_1 = node_ids; _i < node_ids_1.length; _i++) {\n            var node_id = node_ids_1[_i];\n            var node = this.tree_widget.getNodeById(node_id);\n            if (node) {\n                if (!node.load_on_demand) {\n                    node.is_open = true;\n                }\n                else {\n                    must_load_on_demand = true;\n                }\n            }\n        }\n        return must_load_on_demand;\n    };\n    SaveStateHandler.prototype._selectInitialNodes = function (node_ids) {\n        var select_count = 0;\n        for (var _i = 0, node_ids_2 = node_ids; _i < node_ids_2.length; _i++) {\n            var node_id = node_ids_2[_i];\n            var node = this.tree_widget.getNodeById(node_id);\n            if (node) {\n                select_count += 1;\n                if (this.tree_widget.select_node_handler) {\n                    this.tree_widget.select_node_handler.addToSelection(node);\n                }\n            }\n        }\n        return select_count !== 0;\n    };\n    SaveStateHandler.prototype._resetSelection = function () {\n        var select_node_handler = this.tree_widget.select_node_handler;\n        if (select_node_handler) {\n            var selected_nodes = select_node_handler.getSelectedNodes();\n            selected_nodes.forEach(function (node) {\n                select_node_handler.removeFromSelection(node);\n            });\n        }\n    };\n    SaveStateHandler.prototype._setInitialStateOnDemand = function (node_ids_param, selected_nodes, cb_finished) {\n        var _this = this;\n        var loading_count = 0;\n        var node_ids = node_ids_param;\n        var openNodes = function () {\n            var new_nodes_ids = [];\n            for (var _i = 0, node_ids_3 = node_ids; _i < node_ids_3.length; _i++) {\n                var node_id = node_ids_3[_i];\n                var node = _this.tree_widget.getNodeById(node_id);\n                if (!node) {\n                    new_nodes_ids.push(node_id);\n                }\n                else {\n                    if (!node.is_loading) {\n                        if (node.load_on_demand) {\n                            loadAndOpenNode(node);\n                        }\n                        else {\n                            _this.tree_widget._openNode(node, false, null);\n                        }\n                    }\n                }\n            }\n            node_ids = new_nodes_ids;\n            if (_this._selectInitialNodes(selected_nodes)) {\n                _this.tree_widget._refreshElements(null);\n            }\n            if (loading_count === 0) {\n                cb_finished();\n            }\n        };\n        var loadAndOpenNode = function (node) {\n            loading_count += 1;\n            _this.tree_widget._openNode(node, false, function () {\n                loading_count -= 1;\n                openNodes();\n            });\n        };\n        openNodes();\n    };\n    SaveStateHandler.prototype.getKeyName = function () {\n        if (typeof this.tree_widget.options.saveState === \"string\") {\n            return this.tree_widget.options.saveState;\n        }\n        else {\n            return \"tree\";\n        }\n    };\n    SaveStateHandler.prototype.supportsLocalStorage = function () {\n        var testSupport = function () {\n            // Is local storage supported?\n            if (localStorage == null) {\n                return false;\n            }\n            else {\n                // Check if it's possible to store an item. Safari does not allow this in private browsing mode.\n                try {\n                    var key = \"_storage_test\";\n                    sessionStorage.setItem(key, \"value\");\n                    sessionStorage.removeItem(key);\n                }\n                catch (error) {\n                    return false;\n                }\n                return true;\n            }\n        };\n        if (this._supportsLocalStorage == null) {\n            this._supportsLocalStorage = testSupport();\n        }\n        return this._supportsLocalStorage;\n    };\n    return SaveStateHandler;\n}());\nexports[\"default\"] = SaveStateHandler;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/save_state_handler.ts\n// module id = 10\n// module chunks = 0 1","\"use strict\";\nexports.__esModule = true;\nvar ScrollHandler = /** @class */ (function () {\n    function ScrollHandler(tree_widget) {\n        this.tree_widget = tree_widget;\n        this.previous_top = -1;\n        this.is_initialized = false;\n    }\n    ScrollHandler.prototype.checkScrolling = function () {\n        this.ensureInit();\n        this.checkVerticalScrolling();\n        this.checkHorizontalScrolling();\n    };\n    ScrollHandler.prototype.scrollToY = function (top) {\n        this.ensureInit();\n        if (this.$scroll_parent) {\n            this.$scroll_parent[0].scrollTop = top;\n        }\n        else {\n            var offset = this.tree_widget.$el.offset();\n            var tree_top = offset ? offset.top : 0;\n            jQuery(document).scrollTop(top + tree_top);\n        }\n    };\n    ScrollHandler.prototype.isScrolledIntoView = function ($element) {\n        this.ensureInit();\n        var element_bottom;\n        var view_bottom;\n        var element_top;\n        var view_top;\n        var el_height = $element.height() || 0;\n        if (this.$scroll_parent) {\n            view_top = 0;\n            view_bottom = this.$scroll_parent.height() || 0;\n            var offset = $element.offset();\n            var original_top = offset ? offset.top : 0;\n            element_top = original_top - this.scroll_parent_top;\n            element_bottom = element_top + el_height;\n        }\n        else {\n            view_top = jQuery(window).scrollTop() || 0;\n            var window_height = jQuery(window).height() || 0;\n            view_bottom = view_top + window_height;\n            var offset = $element.offset();\n            element_top = offset ? offset.top : 0;\n            element_bottom = element_top + el_height;\n        }\n        return element_bottom <= view_bottom && element_top >= view_top;\n    };\n    ScrollHandler.prototype.getScrollLeft = function () {\n        if (!this.$scroll_parent) {\n            return 0;\n        }\n        else {\n            return this.$scroll_parent.scrollLeft() || 0;\n        }\n    };\n    ScrollHandler.prototype.initScrollParent = function () {\n        var _this = this;\n        var getParentWithOverflow = function () {\n            var css_attributes = [\"overflow\", \"overflow-y\"];\n            var hasOverFlow = function ($el) {\n                for (var _i = 0, css_attributes_1 = css_attributes; _i < css_attributes_1.length; _i++) {\n                    var attr = css_attributes_1[_i];\n                    var overflow_value = $el.css(attr);\n                    if (overflow_value === \"auto\" ||\n                        overflow_value === \"scroll\") {\n                        return true;\n                    }\n                }\n                return false;\n            };\n            if (hasOverFlow(_this.tree_widget.$el)) {\n                return _this.tree_widget.$el;\n            }\n            for (var _i = 0, _a = _this.tree_widget.$el.parents().get(); _i < _a.length; _i++) {\n                var el = _a[_i];\n                var $el = jQuery(el);\n                if (hasOverFlow($el)) {\n                    return $el;\n                }\n            }\n            return null;\n        };\n        var setDocumentAsScrollParent = function () {\n            _this.scroll_parent_top = 0;\n            _this.$scroll_parent = null;\n        };\n        if (this.tree_widget.$el.css(\"position\") === \"fixed\") {\n            setDocumentAsScrollParent();\n        }\n        var $scroll_parent = getParentWithOverflow();\n        if ($scroll_parent &&\n            $scroll_parent.length &&\n            $scroll_parent[0].tagName !== \"HTML\") {\n            this.$scroll_parent = $scroll_parent;\n            var offset = this.$scroll_parent.offset();\n            this.scroll_parent_top = offset ? offset.top : 0;\n        }\n        else {\n            setDocumentAsScrollParent();\n        }\n        this.is_initialized = true;\n    };\n    ScrollHandler.prototype.ensureInit = function () {\n        if (!this.is_initialized) {\n            this.initScrollParent();\n        }\n    };\n    ScrollHandler.prototype.handleVerticalScrollingWithScrollParent = function (area) {\n        var scroll_parent = this.$scroll_parent && this.$scroll_parent[0];\n        if (!scroll_parent) {\n            return;\n        }\n        var distance_bottom = this.scroll_parent_top + scroll_parent.offsetHeight - area.bottom;\n        if (distance_bottom < 20) {\n            scroll_parent.scrollTop += 20;\n            this.tree_widget.refreshHitAreas();\n            this.previous_top = -1;\n        }\n        else if (area.top - this.scroll_parent_top < 20) {\n            scroll_parent.scrollTop -= 20;\n            this.tree_widget.refreshHitAreas();\n            this.previous_top = -1;\n        }\n    };\n    ScrollHandler.prototype.handleVerticalScrollingWithDocument = function (area) {\n        var scroll_top = jQuery(document).scrollTop() || 0;\n        var distance_top = area.top - scroll_top;\n        if (distance_top < 20) {\n            jQuery(document).scrollTop(scroll_top - 20);\n        }\n        else {\n            var window_height = jQuery(window).height() || 0;\n            if (window_height - (area.bottom - scroll_top) < 20) {\n                jQuery(document).scrollTop(scroll_top + 20);\n            }\n        }\n    };\n    ScrollHandler.prototype.checkVerticalScrolling = function () {\n        var hovered_area = this.tree_widget.dnd_handler &&\n            this.tree_widget.dnd_handler.hovered_area;\n        if (hovered_area && hovered_area.top !== this.previous_top) {\n            this.previous_top = hovered_area.top;\n            if (this.$scroll_parent) {\n                this.handleVerticalScrollingWithScrollParent(hovered_area);\n            }\n            else {\n                this.handleVerticalScrollingWithDocument(hovered_area);\n            }\n        }\n    };\n    ScrollHandler.prototype.checkHorizontalScrolling = function () {\n        var position_info = this.tree_widget.dnd_handler &&\n            this.tree_widget.dnd_handler.position_info;\n        if (!position_info) {\n            return;\n        }\n        if (this.$scroll_parent) {\n            this.handleHorizontalScrollingWithParent(position_info);\n        }\n        else {\n            this.handleHorizontalScrollingWithDocument(position_info);\n        }\n    };\n    ScrollHandler.prototype.handleHorizontalScrollingWithParent = function (position_info) {\n        var $scroll_parent = this.$scroll_parent;\n        var scroll_parent_offset = $scroll_parent && $scroll_parent.offset();\n        if (!($scroll_parent && scroll_parent_offset)) {\n            return;\n        }\n        var scroll_parent = $scroll_parent[0];\n        var can_scroll_right = scroll_parent.scrollLeft + scroll_parent.clientWidth <\n            scroll_parent.scrollWidth;\n        var can_scroll_left = scroll_parent.scrollLeft > 0;\n        var right_edge = scroll_parent_offset.left + scroll_parent.clientWidth;\n        var left_edge = scroll_parent_offset.left;\n        var is_near_right_edge = position_info.page_x > right_edge - 20;\n        var is_near_left_edge = position_info.page_x < left_edge + 20;\n        if (is_near_right_edge && can_scroll_right) {\n            scroll_parent.scrollLeft = Math.min(scroll_parent.scrollLeft + 20, scroll_parent.scrollWidth);\n        }\n        else if (is_near_left_edge && can_scroll_left) {\n            scroll_parent.scrollLeft = Math.max(scroll_parent.scrollLeft - 20, 0);\n        }\n    };\n    ScrollHandler.prototype.handleHorizontalScrollingWithDocument = function (position_info) {\n        var $document = jQuery(document);\n        var scroll_left = $document.scrollLeft() || 0;\n        var window_width = jQuery(window).width() || 0;\n        var can_scroll_left = scroll_left > 0;\n        var is_near_right_edge = position_info.page_x > window_width - 20;\n        var is_near_left_edge = position_info.page_x - scroll_left < 20;\n        if (is_near_right_edge) {\n            $document.scrollLeft(scroll_left + 20);\n        }\n        else if (is_near_left_edge && can_scroll_left) {\n            $document.scrollLeft(Math.max(scroll_left - 20, 0));\n        }\n    };\n    return ScrollHandler;\n}());\nexports[\"default\"] = ScrollHandler;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scroll_handler.ts\n// module id = 11\n// module chunks = 0 1","\"use strict\";\nexports.__esModule = true;\nvar SelectNodeHandler = /** @class */ (function () {\n    function SelectNodeHandler(tree_widget) {\n        this.tree_widget = tree_widget;\n        this.clear();\n    }\n    SelectNodeHandler.prototype.getSelectedNode = function () {\n        var selected_nodes = this.getSelectedNodes();\n        if (selected_nodes.length) {\n            return selected_nodes[0];\n        }\n        else {\n            return false;\n        }\n    };\n    SelectNodeHandler.prototype.getSelectedNodes = function () {\n        if (this.selected_single_node) {\n            return [this.selected_single_node];\n        }\n        else {\n            var selected_nodes = [];\n            for (var id in this.selected_nodes) {\n                if (this.selected_nodes.hasOwnProperty(id)) {\n                    var node = this.tree_widget.getNodeById(id);\n                    if (node) {\n                        selected_nodes.push(node);\n                    }\n                }\n            }\n            return selected_nodes;\n        }\n    };\n    SelectNodeHandler.prototype.getSelectedNodesUnder = function (parent) {\n        if (this.selected_single_node) {\n            if (parent.isParentOf(this.selected_single_node)) {\n                return [this.selected_single_node];\n            }\n            else {\n                return [];\n            }\n        }\n        else {\n            var selected_nodes = [];\n            for (var id in this.selected_nodes) {\n                if (this.selected_nodes.hasOwnProperty(id)) {\n                    var node = this.tree_widget.getNodeById(id);\n                    if (node && parent.isParentOf(node)) {\n                        selected_nodes.push(node);\n                    }\n                }\n            }\n            return selected_nodes;\n        }\n    };\n    SelectNodeHandler.prototype.isNodeSelected = function (node) {\n        if (!node) {\n            return false;\n        }\n        else if (node.id != null) {\n            if (this.selected_nodes[node.id]) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else if (this.selected_single_node) {\n            return this.selected_single_node.element === node.element;\n        }\n        else {\n            return false;\n        }\n    };\n    SelectNodeHandler.prototype.clear = function () {\n        this.selected_nodes = {};\n        this.selected_single_node = null;\n    };\n    SelectNodeHandler.prototype.removeFromSelection = function (node, include_children) {\n        var _this = this;\n        if (include_children === void 0) { include_children = false; }\n        if (node.id == null) {\n            if (this.selected_single_node &&\n                node.element === this.selected_single_node.element) {\n                this.selected_single_node = null;\n            }\n        }\n        else {\n            delete this.selected_nodes[node.id];\n            if (include_children) {\n                node.iterate(function () {\n                    delete _this.selected_nodes[node.id];\n                    return true;\n                });\n            }\n        }\n    };\n    SelectNodeHandler.prototype.addToSelection = function (node) {\n        if (node.id != null) {\n            this.selected_nodes[node.id] = true;\n        }\n        else {\n            this.selected_single_node = node;\n        }\n    };\n    return SelectNodeHandler;\n}());\nexports[\"default\"] = SelectNodeHandler;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/select_node_handler.ts\n// module id = 12\n// module chunks = 0 1","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\nvar node_1 = require(\"./node\");\nvar NodeElement = /** @class */ (function () {\n    function NodeElement(node, tree_widget) {\n        this.init(node, tree_widget);\n    }\n    NodeElement.prototype.init = function (node, tree_widget) {\n        this.node = node;\n        this.tree_widget = tree_widget;\n        if (!node.element) {\n            node.element = this.tree_widget.element.get(0);\n        }\n        this.$element = jQuery(node.element);\n    };\n    NodeElement.prototype.addDropHint = function (position) {\n        if (this.mustShowBorderDropHint(position)) {\n            return new BorderDropHint(this.$element, this.tree_widget._getScrollLeft());\n        }\n        else {\n            return new GhostDropHint(this.node, this.$element, position);\n        }\n    };\n    NodeElement.prototype.select = function () {\n        var $li = this.getLi();\n        $li.addClass(\"jqtree-selected\");\n        $li.attr(\"aria-selected\", \"true\");\n        var $span = this.getSpan();\n        $span.attr(\"tabindex\", this.tree_widget.options.tabIndex);\n        $span.focus();\n    };\n    NodeElement.prototype.deselect = function () {\n        var $li = this.getLi();\n        $li.removeClass(\"jqtree-selected\");\n        $li.attr(\"aria-selected\", \"false\");\n        var $span = this.getSpan();\n        $span.removeAttr(\"tabindex\");\n        $span.blur();\n    };\n    NodeElement.prototype.getUl = function () {\n        return this.$element.children(\"ul:first\");\n    };\n    NodeElement.prototype.getSpan = function () {\n        return this.$element\n            .children(\".jqtree-element\")\n            .find(\"span.jqtree-title\");\n    };\n    NodeElement.prototype.getLi = function () {\n        return this.$element;\n    };\n    NodeElement.prototype.mustShowBorderDropHint = function (position) {\n        return position === node_1.Position.Inside;\n    };\n    return NodeElement;\n}());\nexports.NodeElement = NodeElement;\nvar FolderElement = /** @class */ (function (_super) {\n    __extends(FolderElement, _super);\n    function FolderElement() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FolderElement.prototype.open = function (on_finished, slide, animationSpeed) {\n        var _this = this;\n        if (slide === void 0) { slide = true; }\n        if (animationSpeed === void 0) { animationSpeed = \"fast\"; }\n        if (!this.node.is_open) {\n            this.node.is_open = true;\n            var $button = this.getButton();\n            $button.removeClass(\"jqtree-closed\");\n            $button.html(\"\");\n            var button_el = $button.get(0);\n            if (button_el) {\n                var icon = this.tree_widget.renderer.opened_icon_element.cloneNode(false);\n                button_el.appendChild(icon);\n            }\n            var doOpen = function () {\n                var $li = _this.getLi();\n                $li.removeClass(\"jqtree-closed\");\n                var $span = _this.getSpan();\n                $span.attr(\"aria-expanded\", \"true\");\n                if (on_finished) {\n                    on_finished(_this.node);\n                }\n                _this.tree_widget._triggerEvent(\"tree.open\", {\n                    node: _this.node\n                });\n            };\n            if (slide) {\n                this.getUl().slideDown(animationSpeed, doOpen);\n            }\n            else {\n                this.getUl().show();\n                doOpen();\n            }\n        }\n    };\n    FolderElement.prototype.close = function (slide, animationSpeed) {\n        var _this = this;\n        if (slide === void 0) { slide = true; }\n        if (animationSpeed === void 0) { animationSpeed = \"fast\"; }\n        if (this.node.is_open) {\n            this.node.is_open = false;\n            var $button = this.getButton();\n            $button.addClass(\"jqtree-closed\");\n            $button.html(\"\");\n            var button_el = $button.get(0);\n            if (button_el) {\n                var icon = this.tree_widget.renderer.closed_icon_element.cloneNode(false);\n                button_el.appendChild(icon);\n            }\n            var doClose = function () {\n                var $li = _this.getLi();\n                $li.addClass(\"jqtree-closed\");\n                var $span = _this.getSpan();\n                $span.attr(\"aria-expanded\", \"false\");\n                _this.tree_widget._triggerEvent(\"tree.close\", {\n                    node: _this.node\n                });\n            };\n            if (slide) {\n                this.getUl().slideUp(animationSpeed, doClose);\n            }\n            else {\n                this.getUl().hide();\n                doClose();\n            }\n        }\n    };\n    FolderElement.prototype.mustShowBorderDropHint = function (position) {\n        return !this.node.is_open && position === node_1.Position.Inside;\n    };\n    FolderElement.prototype.getButton = function () {\n        return this.$element\n            .children(\".jqtree-element\")\n            .find(\"a.jqtree-toggler\");\n    };\n    return FolderElement;\n}(NodeElement));\nexports.FolderElement = FolderElement;\nvar BorderDropHint = /** @class */ (function () {\n    function BorderDropHint($element, scroll_left) {\n        var $div = $element.children(\".jqtree-element\");\n        var el_width = $element.width() || 0;\n        var width = Math.max(el_width + scroll_left - 4, 0);\n        var el_height = $div.outerHeight() || 0;\n        var height = Math.max(el_height - 4, 0);\n        this.$hint = jQuery('<span class=\"jqtree-border\"></span>');\n        $div.append(this.$hint);\n        this.$hint.css({ width: width, height: height });\n    }\n    BorderDropHint.prototype.remove = function () {\n        this.$hint.remove();\n    };\n    return BorderDropHint;\n}());\nexports.BorderDropHint = BorderDropHint;\nvar GhostDropHint = /** @class */ (function () {\n    function GhostDropHint(node, $element, position) {\n        this.$element = $element;\n        this.node = node;\n        this.$ghost = jQuery(\"<li class=\\\"jqtree_common jqtree-ghost\\\"><span class=\\\"jqtree_common jqtree-circle\\\"></span>\\n            <span class=\\\"jqtree_common jqtree-line\\\"></span></li>\");\n        if (position === node_1.Position.After) {\n            this.moveAfter();\n        }\n        else if (position === node_1.Position.Before) {\n            this.moveBefore();\n        }\n        else if (position === node_1.Position.Inside) {\n            if (node.isFolder() && node.is_open) {\n                this.moveInsideOpenFolder();\n            }\n            else {\n                this.moveInside();\n            }\n        }\n    }\n    GhostDropHint.prototype.remove = function () {\n        this.$ghost.remove();\n    };\n    GhostDropHint.prototype.moveAfter = function () {\n        this.$element.after(this.$ghost);\n    };\n    GhostDropHint.prototype.moveBefore = function () {\n        this.$element.before(this.$ghost);\n    };\n    GhostDropHint.prototype.moveInsideOpenFolder = function () {\n        jQuery(this.node.children[0].element).before(this.$ghost);\n    };\n    GhostDropHint.prototype.moveInside = function () {\n        this.$element.after(this.$ghost);\n        this.$ghost.addClass(\"jqtree-inside\");\n    };\n    return GhostDropHint;\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/node_element.ts\n// module id = 13\n// module chunks = 0 1"],"sourceRoot":""}