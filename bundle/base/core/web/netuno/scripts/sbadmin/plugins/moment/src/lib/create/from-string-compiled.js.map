{"version":3,"sources":["from-string.js"],"names":[],"mappings":"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","file":"from-string-compiled.js","sourcesContent":["import { matchOffset } from '../parse/regex';\nimport { configFromStringAndFormat } from './from-string-and-format';\nimport { hooks } from '../utils/hooks';\nimport { deprecate } from '../utils/deprecate';\nimport getParsingFlags from './parsing-flags';\n\n// iso 8601 regex\n// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\nvar isoRegex = /^\\s*(?:[+-]\\d{6}|\\d{4})-(?:(\\d\\d-\\d\\d)|(W\\d\\d$)|(W\\d\\d-\\d)|(\\d\\d\\d))((T| )(\\d\\d(:\\d\\d(:\\d\\d(\\.\\d+)?)?)?)?([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n\nvar isoDates = [\n    ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d{2}-\\d{2}/],\n    ['YYYY-MM-DD', /\\d{4}-\\d{2}-\\d{2}/],\n    ['GGGG-[W]WW-E', /\\d{4}-W\\d{2}-\\d/],\n    ['GGGG-[W]WW', /\\d{4}-W\\d{2}/],\n    ['YYYY-DDD', /\\d{4}-\\d{3}/]\n];\n\n// iso time formats and regexes\nvar isoTimes = [\n    ['HH:mm:ss.SSSS', /(T| )\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n    ['HH:mm:ss', /(T| )\\d\\d:\\d\\d:\\d\\d/],\n    ['HH:mm', /(T| )\\d\\d:\\d\\d/],\n    ['HH', /(T| )\\d\\d/]\n];\n\nvar aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;\n\n// date from iso format\nexport function configFromISO(config) {\n    var i, l,\n        string = config._i,\n        match = isoRegex.exec(string);\n\n    if (match) {\n        getParsingFlags(config).iso = true;\n        for (i = 0, l = isoDates.length; i < l; i++) {\n            if (isoDates[i][1].exec(string)) {\n                config._f = isoDates[i][0];\n                break;\n            }\n        }\n        for (i = 0, l = isoTimes.length; i < l; i++) {\n            if (isoTimes[i][1].exec(string)) {\n                // match[6] should be 'T' or space\n                config._f += (match[6] || ' ') + isoTimes[i][0];\n                break;\n            }\n        }\n        if (string.match(matchOffset)) {\n            config._f += 'Z';\n        }\n        configFromStringAndFormat(config);\n    } else {\n        config._isValid = false;\n    }\n}\n\n// date from iso format or fallback\nexport function configFromString(config) {\n    var matched = aspNetJsonRegex.exec(config._i);\n\n    if (matched !== null) {\n        config._d = new Date(+matched[1]);\n        return;\n    }\n\n    configFromISO(config);\n    if (config._isValid === false) {\n        delete config._isValid;\n        hooks.createFromInputFallback(config);\n    }\n}\n\nhooks.createFromInputFallback = deprecate(\n    'moment construction falls back to js Date. This is ' +\n    'discouraged and will be removed in upcoming major ' +\n    'release. Please refer to ' +\n    'https://github.com/moment/moment/issues/1407 for more info.',\n    function (config) {\n        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n    }\n);\n"]}