{"version":3,"sources":["compare.js"],"names":[],"mappings":"AAAA,SAAS,QAAQ,QAAQ,eAAe,CAAC;AACzC,SAAS,cAAc,QAAQ,kBAAkB,CAAC;AAClD,SAAS,WAAW,QAAQ,iBAAiB,CAAC;;AAE9C,OAAO,SAAS,OAAO,CAAE,KAAK,EAAE,KAAK,EAAE;AACnC,QAAI,OAAO,CAAC;AACZ,SAAK,GAAG,cAAc,CAAC,OAAO,KAAK,KAAK,WAAW,GAAG,KAAK,GAAG,aAAa,CAAC,CAAC;AAC7E,QAAI,KAAK,KAAK,aAAa,EAAE;AACzB,aAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;AACrD,eAAO,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC;KACzB,MAAM;AACH,eAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AACzD,eAAO,OAAO,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;KACjD;CACJ;;AAED,OAAO,SAAS,QAAQ,CAAE,KAAK,EAAE,KAAK,EAAE;AACpC,QAAI,OAAO,CAAC;AACZ,SAAK,GAAG,cAAc,CAAC,OAAO,KAAK,KAAK,WAAW,GAAG,KAAK,GAAG,aAAa,CAAC,CAAC;AAC7E,QAAI,KAAK,KAAK,aAAa,EAAE;AACzB,aAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;AACrD,eAAO,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC;KACzB,MAAM;AACH,eAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AACzD,eAAO,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;KAC/C;CACJ;;AAED,OAAO,SAAS,SAAS,CAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE;AACxC,WAAO,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;CAChE;;AAED,OAAO,SAAS,MAAM,CAAE,KAAK,EAAE,KAAK,EAAE;AAClC,QAAI,OAAO,CAAC;AACZ,SAAK,GAAG,cAAc,CAAC,KAAK,IAAI,aAAa,CAAC,CAAC;AAC/C,QAAI,KAAK,KAAK,aAAa,EAAE;AACzB,aAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;AACrD,eAAO,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC;KAC3B,MAAM;AACH,eAAO,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AAC9B,eAAO,CAAE,IAAI,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,AAAC,IAAI,OAAO,IAAI,OAAO,IAAI,CAAE,IAAI,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,AAAC,CAAC;KAC/F;CACJ","file":"compare-compiled.js","sourcesContent":["import { isMoment } from './constructor';\nimport { normalizeUnits } from '../units/aliases';\nimport { createLocal } from '../create/local';\n\nexport function isAfter (input, units) {\n    var inputMs;\n    units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');\n    if (units === 'millisecond') {\n        input = isMoment(input) ? input : createLocal(input);\n        return +this > +input;\n    } else {\n        inputMs = isMoment(input) ? +input : +createLocal(input);\n        return inputMs < +this.clone().startOf(units);\n    }\n}\n\nexport function isBefore (input, units) {\n    var inputMs;\n    units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');\n    if (units === 'millisecond') {\n        input = isMoment(input) ? input : createLocal(input);\n        return +this < +input;\n    } else {\n        inputMs = isMoment(input) ? +input : +createLocal(input);\n        return +this.clone().endOf(units) < inputMs;\n    }\n}\n\nexport function isBetween (from, to, units) {\n    return this.isAfter(from, units) && this.isBefore(to, units);\n}\n\nexport function isSame (input, units) {\n    var inputMs;\n    units = normalizeUnits(units || 'millisecond');\n    if (units === 'millisecond') {\n        input = isMoment(input) ? input : createLocal(input);\n        return +this === +input;\n    } else {\n        inputMs = +createLocal(input);\n        return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));\n    }\n}\n"]}