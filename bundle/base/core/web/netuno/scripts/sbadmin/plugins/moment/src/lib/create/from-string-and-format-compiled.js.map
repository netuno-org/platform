{"version":3,"sources":["from-string-and-format.js"],"names":[],"mappings":"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","file":"from-string-and-format-compiled.js","sourcesContent":["import { configFromISO } from './from-string';\nimport { configFromArray } from './from-array';\nimport { getParseRegexForToken }   from '../parse/regex';\nimport { addTimeToArrayFromToken } from '../parse/token';\nimport { expandFormat, formatTokenFunctions, formattingTokens } from '../format/format';\nimport checkOverflow from './check-overflow';\nimport { HOUR } from '../units/constants';\nimport { hooks } from '../utils/hooks';\nimport getParsingFlags from './parsing-flags';\n\n// constant that refers to the ISO standard\nhooks.ISO_8601 = function () {};\n\n// date from string and format string\nexport function configFromStringAndFormat(config) {\n    // TODO: Move this to another part of the creation flow to prevent circular deps\n    if (config._f === hooks.ISO_8601) {\n        configFromISO(config);\n        return;\n    }\n\n    config._a = [];\n    getParsingFlags(config).empty = true;\n\n    // This array is used to make a Date, either with `new Date` or `Date.UTC`\n    var string = '' + config._i,\n        i, parsedInput, tokens, token, skipped,\n        stringLength = string.length,\n        totalParsedInputLength = 0;\n\n    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\n\n    for (i = 0; i < tokens.length; i++) {\n        token = tokens[i];\n        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];\n        if (parsedInput) {\n            skipped = string.substr(0, string.indexOf(parsedInput));\n            if (skipped.length > 0) {\n                getParsingFlags(config).unusedInput.push(skipped);\n            }\n            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n            totalParsedInputLength += parsedInput.length;\n        }\n        // don't parse if it's not a known token\n        if (formatTokenFunctions[token]) {\n            if (parsedInput) {\n                getParsingFlags(config).empty = false;\n            }\n            else {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n            addTimeToArrayFromToken(token, parsedInput, config);\n        }\n        else if (config._strict && !parsedInput) {\n            getParsingFlags(config).unusedTokens.push(token);\n        }\n    }\n\n    // add remaining unparsed input length to the string\n    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;\n    if (string.length > 0) {\n        getParsingFlags(config).unusedInput.push(string);\n    }\n\n    // clear _12h flag if hour is <= 12\n    if (getParsingFlags(config).bigHour === true &&\n            config._a[HOUR] <= 12 &&\n            config._a[HOUR] > 0) {\n        getParsingFlags(config).bigHour = undefined;\n    }\n    // handle meridiem\n    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);\n\n    configFromArray(config);\n    checkOverflow(config);\n}\n\n\nfunction meridiemFixWrap (locale, hour, meridiem) {\n    var isPm;\n\n    if (meridiem == null) {\n        // nothing to do\n        return hour;\n    }\n    if (locale.meridiemHour != null) {\n        return locale.meridiemHour(hour, meridiem);\n    } else if (locale.isPM != null) {\n        // Fallback\n        isPm = locale.isPM(meridiem);\n        if (isPm && hour < 12) {\n            hour += 12;\n        }\n        if (!isPm && hour === 12) {\n            hour = 0;\n        }\n        return hour;\n    } else {\n        // this is not supposed to happen\n        return hour;\n    }\n}\n"]}