{"version":3,"sources":["as.js"],"names":[],"mappings":"AAAA,SAAS,YAAY,EAAE,YAAY,QAAQ,UAAU,CAAC;AACtD,SAAS,cAAc,QAAQ,kBAAkB,CAAC;AAClD,OAAO,KAAK,MAAM,iBAAiB,CAAC;;AAEpC,OAAO,SAAS,EAAE,CAAE,KAAK,EAAE;AACvB,QAAI,IAAI,CAAC;AACT,QAAI,MAAM,CAAC;AACX,QAAI,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC;;AAEtC,SAAK,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;;AAE9B,QAAI,KAAK,KAAK,OAAO,IAAI,KAAK,KAAK,MAAM,EAAE;AACvC,YAAI,GAAK,IAAI,CAAC,KAAK,GAAK,YAAY,GAAG,KAAK,CAAC;AAC7C,cAAM,GAAG,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;AAC3C,eAAO,KAAK,KAAK,OAAO,GAAG,MAAM,GAAG,MAAM,GAAG,EAAE,CAAC;KACnD,MAAM;;AAEH,YAAI,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;AAC3D,gBAAQ,KAAK;AACT,iBAAK,MAAM;AAAK,uBAAO,IAAI,GAAG,CAAC,GAAO,YAAY,GAAG,MAAM,CAAC;AAAA,AAC5D,iBAAK,KAAK;AAAM,uBAAO,IAAI,GAAW,YAAY,GAAG,KAAK,CAAC;AAAA,AAC3D,iBAAK,MAAM;AAAK,uBAAO,IAAI,GAAG,EAAE,GAAM,YAAY,GAAG,IAAI,CAAC;AAAA,AAC1D,iBAAK,QAAQ;AAAG,uBAAO,IAAI,GAAG,IAAI,GAAI,YAAY,GAAG,GAAG,CAAC;AAAA,AACzD,iBAAK,QAAQ;AAAG,uBAAO,IAAI,GAAG,KAAK,GAAG,YAAY,GAAG,IAAI,CAAC;;AAAA,AAE1D,iBAAK,aAAa;AAAE,uBAAO,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,GAAG,YAAY,CAAC;AAAA,AACnE;AAAS,sBAAM,IAAI,KAAK,CAAC,eAAe,GAAG,KAAK,CAAC,CAAC;AAAA,SACrD;KACJ;CACJ;;;AAAA,AAGD,OAAO,SAAS,OAAO,GAAI;AACvB,WACI,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,KAAK,GAAG,KAAK,GAClB,AAAC,IAAI,CAAC,OAAO,GAAG,EAAE,GAAI,MAAM,GAC5B,KAAK,CAAC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,GAAG,OAAO,CACpC;CACL;;AAED,SAAS,MAAM,CAAE,KAAK,EAAE;AACpB,WAAO,YAAY;AACf,eAAO,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;KACzB,CAAC;CACL;;AAED,OAAO,IAAI,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;AACzC,OAAO,IAAI,SAAS,GAAQ,MAAM,CAAC,GAAG,CAAC,CAAC;AACxC,OAAO,IAAI,SAAS,GAAQ,MAAM,CAAC,GAAG,CAAC,CAAC;AACxC,OAAO,IAAI,OAAO,GAAU,MAAM,CAAC,GAAG,CAAC,CAAC;AACxC,OAAO,IAAI,MAAM,GAAW,MAAM,CAAC,GAAG,CAAC,CAAC;AACxC,OAAO,IAAI,OAAO,GAAU,MAAM,CAAC,GAAG,CAAC,CAAC;AACxC,OAAO,IAAI,QAAQ,GAAS,MAAM,CAAC,GAAG,CAAC,CAAC;AACxC,OAAO,IAAI,OAAO,GAAU,MAAM,CAAC,GAAG,CAAC,CAAC","file":"as-compiled.js","sourcesContent":["import { daysToMonths, monthsToDays } from './bubble';\nimport { normalizeUnits } from '../units/aliases';\nimport toInt from '../utils/to-int';\n\nexport function as (units) {\n    var days;\n    var months;\n    var milliseconds = this._milliseconds;\n\n    units = normalizeUnits(units);\n\n    if (units === 'month' || units === 'year') {\n        days   = this._days   + milliseconds / 864e5;\n        months = this._months + daysToMonths(days);\n        return units === 'month' ? months : months / 12;\n    } else {\n        // handle milliseconds separately because of floating point math errors (issue #1867)\n        days = this._days + Math.round(monthsToDays(this._months));\n        switch (units) {\n            case 'week'   : return days / 7     + milliseconds / 6048e5;\n            case 'day'    : return days         + milliseconds / 864e5;\n            case 'hour'   : return days * 24    + milliseconds / 36e5;\n            case 'minute' : return days * 1440  + milliseconds / 6e4;\n            case 'second' : return days * 86400 + milliseconds / 1000;\n            // Math.floor prevents floating point math errors here\n            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;\n            default: throw new Error('Unknown unit ' + units);\n        }\n    }\n}\n\n// TODO: Use this.as('ms')?\nexport function valueOf () {\n    return (\n        this._milliseconds +\n        this._days * 864e5 +\n        (this._months % 12) * 2592e6 +\n        toInt(this._months / 12) * 31536e6\n    );\n}\n\nfunction makeAs (alias) {\n    return function () {\n        return this.as(alias);\n    };\n}\n\nexport var asMilliseconds = makeAs('ms');\nexport var asSeconds      = makeAs('s');\nexport var asMinutes      = makeAs('m');\nexport var asHours        = makeAs('h');\nexport var asDays         = makeAs('d');\nexport var asWeeks        = makeAs('w');\nexport var asMonths       = makeAs('M');\nexport var asYears        = makeAs('y');\n"]}