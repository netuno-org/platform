// Generated by CoffeeScript 2.7.0
(function() {
  toastr.options = {
    "closeButton": true,
    "debug": false,
    "newestOnTop": true,
    "progressBar": false,
    "positionClass": "netuno-toast-top-center",
    "preventDuplicates": true,
    "onclick": null,
    "showDuration": "300",
    "hideDuration": "1000",
    "timeOut": "3000",
    "extendedTimeOut": "1000",
    "showEasing": "swing",
    "hideEasing": "linear",
    "showMethod": "fadeIn",
    "hideMethod": "fadeOut"
  };

  $(function() {
    $('form').submit(function() {
      return false;
    });
  });

  netuno.newUid = function() {
    var s4;
    s4 = function() {
      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    };
    return `${s4()}${s4()}_${s4()}_${s4()}_${s4()}_${s4()}${s4()}${s4()}`;
  };

  netuno.callbacks = {
    create: function(func) {
      var key;
      key = netuno.newUid();
      netuno.callbacks[key] = func;
      return key;
    },
    remove: function(key) {
      return delete netuno.callbacks[key];
    }
  };

  netuno.menu = function(menu) {
    var buildMenu, containers, containersHtml, navMenuHtml, navbar;
    navMenuHtml = `<li><a netuno-navigation-dashboard href=\"#netuno_dashboard\"><i class=\"fa fa-fw fa-dashboard\"></i> ${netuno.lang['menu.dashboard']}</a></li>`;
    containersHtml = '';
    buildMenu = function(type, parentUId, items, level) {
      var expand, item, k, len, menuHtml;
      menuHtml = '';
      if (level > 0) {
        menuHtml += '<ul>';
      }
      for (k = 0, len = items.length; k < len; k++) {
        item = items[k];
        expand = "";
        if (item.items.length > 0) {
          expand = " data-toggle=";
        }
        menuHtml += '<li>';
        menuHtml += `<a netuno-navigation-${type}-item.name href=\"\#\" netuno-${type}=\"${item.name}\"${expand}>`;
        menuHtml += `${item.text}`;
        if (item.items.length > 0) {
          menuHtml += "<i class=\"fa fa-fw fa-caret-down\"></i>";
        }
        menuHtml += "</a>";
        if (item.items.length > 0) {
          menuHtml += buildMenu(type, item.uid, item.items, level + 1);
        }
        menuHtml += '</li>';
        containersHtml += `<div netuno-container-${type}-${item.name} netuno-${type} netuno-${type}-uid=\"${item.uid}\" netuno-${type}-name=\"${item.name}\">`;
        if (type === 'form') {
          containersHtml += `<div class=\"netuno-form-edit\" netuno-${type}-edit=\"${item.name}\"></div>`;
          containersHtml += `<div class=\"netuno-form-search\" netuno-${type}-search=\"${item.name}\"></div>`;
        }
        containersHtml += "</div>";
      }
      if (level > 0) {
        menuHtml += '</ul>';
      }
      return menuHtml;
    };
    if (menu.forms.length > 0) {
      navMenuHtml += `<li class=\"nav-section-title\"><h4>&nbsp;<i class=\"fa fa-fw fa-edit\"></i>${netuno.lang['menu.forms']}</h4></li>`;
      navMenuHtml += buildMenu('form', 0, menu.forms, 0);
    }
    if (menu.reports.length > 0) {
      navMenuHtml += `<li class=\"nav-section-title\"><h4>&nbsp;<i class=\"fa fa-fw fa-area-chart\"></i>${netuno.lang['menu.reports']}</h4></li>`;
      navMenuHtml += buildMenu('report', 0, menu.reports, 0);
    }
    navbar = $('[netuno-navigation]');
    navbar.append(navMenuHtml).show().find('ul').hide();
    navbar.trigger('netuno:loaded');
    containers = $('[netuno-containers]');
    containers.append(containersHtml);
    containers.trigger('netuno:loaded');
    return netuno.navigationLoaded();
  };

  netuno.loadForm = function(container) {
    var containerSearch, data;
    if (!(container instanceof jQuery)) {
      container = $(container);
    }
    container = container.is("[netuno-form][netuno-form-uid]") ? container : container.closest("[netuno-form][netuno-form-uid]");
    containerSearch = container.children('[netuno-form-search]');
    data = {
      'netuno_table_uid': container.attr('netuno-form-uid')
    };
    if (container.is("[netuno-form-relation]")) {
      data['netuno_relation_table_uid'] = container.attr('netuno-table-uid');
      data['netuno_relation_item_uid'] = container.attr('netuno-item-uid');
    }
    if (containerSearch.is(':empty')) {
      containerSearch.html("<div class=\"netuno-loader\">Loading...</div>");
      $.ajax({
        type: 'POST',
        url: `${netuno.config.urlAdmin}Search${netuno.config.extension}`,
        data: data,
        success: function(response) {
          containerSearch.html(response);
          return netuno.contentLoaded(containerSearch);
        }
      });
    }
    return container.show();
  };

  netuno.formSearchDataTableBulk = {};

  netuno.formSearchDataTableBulkActive = function(tableId, callback) {
    var searchContainer, table;
    netuno.formSearchDataTableBulk[tableId] = {
      active: true,
      callback: callback,
      uids: []
    };
    table = $(`\#${tableId}`);
    searchContainer = table.parents("[netuno-form-search]:first");
    searchContainer.find("[netuno-form-search-buttons]").find("button").prop('disabled', true).fadeTo("slow", 0.5);
    return searchContainer.find("h1.page-header").find('button').prop('disabled', true).fadeTo("slow", 0.5);
  };

  netuno.formSearchDataTableBulkInactive = function(tableId) {
    var searchContainer, table, tableBody;
    if (netuno.formSearchDataTableBulk[tableId] != null) {
      delete netuno.formSearchDataTableBulk[tableId];
    }
    table = $(`\#${tableId}`);
    tableBody = table.find('tbody');
    tableBody.find('tr').each(function() {
      var tr;
      tr = $(this);
      return tr.removeClass('selected');
    });
    searchContainer = table.parents("[netuno-form-search]:first");
    searchContainer.find("[netuno-form-search-buttons]").find("button").prop('disabled', false).fadeTo("slow", 1);
    return searchContainer.find("h1.page-header").find('button').prop('disabled', false).fadeTo("slow", 1);
  };

  netuno.executeFormSearchBulk = function(settings) {
    var container, table, uids;
    settings = $.extend({
      action: null,
      tableId: null,
      callback: function(resut) {}
    }, settings);
    table = $(`\#${settings.tableId}`);
    container = table.parents("[netuno-form][netuno-form-uid]:first");
    container.data({
      pageNumber: 0,
      pageLength: 0,
      rowIndex: 0
    });
    uids = netuno.formSearchDataTableBulk[settings.tableId].uids;
    return $.ajax({
      type: 'POST',
      url: `${netuno.config.urlAdmin}Search${netuno.config.extension}`,
      dataType: 'json',
      contentType: 'application/json',
      data: JSON.stringify({
        netuno_action: `bulk-${settings.action}`,
        netuno_table_name: container.attr('netuno-form-name'),
        netuno_items_uids: uids
      }),
      success: function(response) {
        return settings.callback(response);
      }
    });
  };

  netuno.loadFormSearchDataTable = function(table) {
    var container, containerSearch, containerSearchForm, dt, findDataTableTR, isButton, tableBody, tableId;
    if (!(table instanceof jQuery)) {
      table = $(table);
    }
    isButton = table.is('button');
    container = table.parents("[netuno-form][netuno-form-uid]:first");
    if (!table.is('table')) {
      table = container.find(`[netuno-form-search-table=${container.attr('netuno-form-name')}]:first`);
    }
    tableId = table.attr('id');
    netuno.formSearchDataTableBulkInactive(tableId);
    containerSearch = container.children('[netuno-form-search]');
    containerSearchForm = containerSearch.find(`form[name=netuno_form_${container.attr('netuno-form-name')}_search]:first`);
    tableBody = table.find('tbody');
    tableBody.empty();
    dt = null;
    findDataTableTR = function(e) {
      if (e.tagName.toLowerCase() === 'tr') {
        return e;
      }
      if (e.parentNode.tagName.toLowerCase() === 'tr') {
        return e.parentNode;
      }
      return findDataTableTR(e.parentNode);
    };
    if (table.find('th').length > 0) {
      if (isButton) {
        netuno.unmask(containerSearchForm);
      }
      dt = table.dataTable({
        "pagingType": "full_numbers",
        "pageLength": 25,
        "processing": false,
        "serverSide": true,
        "destroy": true,
        "order": container.data().sorting ? container.data().sorting : [],
        "displayStart": container.data().pageNumber > 0 ? container.data().pageNumber * 25 : null,
        "ajax": {
          "url": `${netuno.config.urlAdmin}Search${netuno.config.extension}?netuno_action=datasource&` + containerSearchForm.serialize(),
          "type": "POST"
        },
        "preDrawCallback": function(settings) {
          return tableBody.html("<tr><td colspan=\"1000\" style=\"background-color: #ffffff;\"><div style=\"width: 100%;\"><div class=\"netuno-loader\">Loading...</div></div></td></tr>");
        },
        "drawCallback": function(settings, json) {
          var pageNumber;
          netuno.mask(table);
          pageNumber = Math.ceil(settings._iDisplayStart / settings._iDisplayLength);
          tableBody.find('tr').data({
            pageNumber,
            pageLength: tableBody.find('tr').length
          });
          tableBody.find('tr').each(function(index) {
            var tr;
            tr = $(this);
            tr.data({
              rowIndex: index
            });
            return tr.off('click').on('click', function(event) {
              var uid;
              tr = $(findDataTableTR(event.target));
              uid = tr.children(':first-child').children('span').html();
              if ((netuno.formSearchDataTableBulk[tableId] != null) && netuno.formSearchDataTableBulk[tableId].active) {
                if (tr.hasClass('selected')) {
                  tr.removeClass('selected');
                  netuno.formSearchDataTableBulk[tableId].uids = netuno.formSearchDataTableBulk[tableId].uids.filter(function(i) {
                    return i !== uid;
                  });
                } else {
                  tr.addClass('selected');
                  netuno.formSearchDataTableBulk[tableId].uids.push(uid);
                }
                return netuno.formSearchDataTableBulk[tableId].callback(netuno.formSearchDataTableBulk[tableId]);
              } else {
                window.scrollTo(container.offset().left, container.offset().top - 70);
                container.data({
                  pageNumber: tr.data().pageNumber,
                  pageLength: tr.data().pageLength,
                  rowIndex: tr.data().rowIndex,
                  sorting: table.dataTableSettings[0].aaSorting
                });
                return netuno.loadFormEdit(table, uid);
              }
            });
          });
          if ((netuno.formSearchDataTableBulk[tableId] != null) && netuno.formSearchDataTableBulk[tableId].active) {
            return tableBody.find('tr').each(function() {
              var tr, trUID;
              tr = $(this);
              trUID = tr.children(':first-child').children('span').html();
              if (netuno.formSearchDataTableBulk[tableId].uids.find(function(uid) {
                return uid === trUID;
              })) {
                return tr.addClass('selected');
              }
            });
          }
        },
        "initComplete": function(settings, json) {
          return table.fadeIn();
        },
        "language": netuno.config.dataTable,
        "dom": 'pitip',
        "tableTools": {
          "sSwfPath": `${netuno.config.urlScripts}/plugins/datatables-tabletools/swf/copy_csv_xls_pdf.swf`
        }
      });
      if (isButton) {
        return netuno.mask(containerSearchForm);
      }
    }
  };

  netuno.loadFormEdit = function(container, item) {
    var containerEdit, data;
    if (!(container instanceof jQuery)) {
      container = $(container);
    }
    container = container.is("[netuno-form][netuno-form-uid]") ? container : container.parents("[netuno-form][netuno-form-uid]:first");
    container.children('[netuno-form-search]').hide();
    data = {
      'netuno_table_uid': container.attr('netuno-form-uid'),
      'netuno_item_uid': item,
      'netuno_edit_only': container.is("[netuno-form-edit-only]"),
      'netuno_zone': container.attr('netuno-zone')
    };
    if (container.is("[netuno-form-relation]")) {
      data['netuno_relation_table_uid'] = container.attr('netuno-table-uid');
      data['netuno_relation_item_uid'] = container.attr('netuno-item-uid');
    }
    containerEdit = container.children('[netuno-form-edit]');
    containerEdit.empty();
    containerEdit.html("<div class=\"netuno-loader\">Loading...</div>");
    containerEdit.show();
    return $.ajax({
      type: 'POST',
      url: `${netuno.config.urlAdmin}Edit${netuno.config.extension}`,
      data: data,
      success: function(response) {
        var containerEditForm;
        containerEdit.html(response);
        netuno.contentLoaded(containerEdit);
        containerEditForm = containerEdit.find(`form[name=netuno_form_${container.attr('netuno-form-name')}_edit]`);
        if (containerEditForm.length > 0) {
          netuno.loadValidation(containerEditForm);
        }
        if (typeof item === 'undefined' || item === null || item === '') {
          return container.trigger('netuno:new');
        } else {
          return container.trigger('netuno:edit', [item]);
        }
      }
    });
  };

  netuno.backFormEdit = function(element, disableSearchTableRefresh) {
    var container, table;
    if (!(element instanceof jQuery)) {
      element = $(element);
    }
    container = element.is("[netuno-form][netuno-form-uid]") ? element : element.parents("[netuno-form][netuno-form-uid]:first");
    container.children('[netuno-form-edit]').empty().hide();
    container.children('[netuno-form-search]').show();
    if (disableSearchTableRefresh !== true) {
      table = container.find(`[netuno-form-search-table=${container.attr('netuno-form-name')}]:first`);
      table.hide();
      netuno.loadFormSearchDataTable(table);
    }
    return container.trigger('netuno:back');
  };

  netuno.saveFormEdit = function(element, fromRelation) {
    var callback, container, containerEdit, containerEditForm;
    if (!(element instanceof jQuery)) {
      element = $(element);
    }
    container = element.is("[netuno-form][netuno-form-uid]") ? element : element.parents("[netuno-form][netuno-form-uid]:first");
    containerEdit = container.children('[netuno-form-edit]');
    containerEditForm = containerEdit.find(`form[name=netuno_form_${container.attr('netuno-form-name')}_edit]:first`);
    netuno.unmask(containerEditForm);
    containerEditForm.ajaxForm().submit();
    if (containerEditForm.validate().valid()) {
      callback = netuno.callbacks.create(function(uid) {
        return container.trigger('netuno:save', [uid]);
      });
      containerEditForm.ajaxForm({
        url: `${netuno.config.urlAdmin}Edit${netuno.config.extension}?netuno_action=save&netuno_autosave=${typeof fromRelation !== 'undefined'}&netuno_callback=${callback}`,
        iframe: false,
        success: function(response) {
          containerEdit.html(response);
          containerEditForm = containerEdit.find(`form[name=netuno_form_${container.attr('netuno-form-name')}_edit]:first`);
          if (containerEditForm.length > 0) {
            netuno.contentLoaded(containerEdit);
            netuno.loadValidation(containerEditForm);
            if (typeof fromRelation !== 'undefined') {
              return containerEditForm.find(`button[netuno-form-edit-relation-button=${fromRelation}]:first`).trigger('click');
            }
          }
        }
      }).submit();
      return true;
    } else {
      netuno.mask(containerEditForm);
      return false;
    }
  };

  netuno.deleteFormEdit = function(element) {
    var callback, container, containerEdit, containerEditForm;
    if (!(element instanceof jQuery)) {
      element = $(element);
    }
    container = element.is("[netuno-form][netuno-form-uid]") ? element : element.parents("[netuno-form][netuno-form-uid]:first");
    containerEdit = container.children('[netuno-form-edit]');
    if (!containerEdit.is(':empty')) {
      containerEditForm = containerEdit.find(`form[name=netuno_form_${container.attr('netuno-form-name')}_edit]:first`);
      netuno.unmask(containerEditForm);
      callback = netuno.callbacks.create(function(uid) {
        return container.trigger('netuno:delete', [uid]);
      });
      return $.ajax({
        type: 'POST',
        url: `${netuno.config.urlAdmin}Edit${netuno.config.extension}?netuno_action=delete&netuno_callback=${callback}`,
        data: containerEditForm.serialize(),
        success: function(response) {
          if (container.data().pageNumber > 0 && container.data().pageLength === 1) {
            container.data({
              pageNumber: container.data().pageNumber - 1
            });
          }
          containerEdit.html(response);
          netuno.contentLoaded(containerEdit);
          containerEditForm = containerEdit.find(`form[name=netuno_form_${container.attr('netuno-form-name')}_edit]:first`);
          if (containerEditForm.length > 0) {
            return netuno.loadValidation(containerEditForm);
          }
        }
      });
    }
  };

  netuno.loadReport = function(container) {
    if (!(container instanceof jQuery)) {
      container = $(container);
    }
    container = container.is("[netuno-report][netuno-report-uid]") ? container : container.parents("[netuno-report][netuno-report-uid]:first");
    container.children('[netuno-report-search]').hide();
    if (container.is(':empty')) {
      $.ajax({
        type: 'POST',
        url: `${netuno.config.urlAdmin}Report${netuno.config.extension}`,
        data: {
          'netuno_report_uid': container.attr('netuno-report-uid')
        },
        success: function(response) {
          var containerForm;
          container.html(response);
          netuno.contentLoaded(container);
          containerForm = container.find(`form[name=netuno_report_${container.attr('netuno-report-name')}_form]`);
          if (containerForm.length > 0) {
            return netuno.loadValidation(containerForm);
          }
        }
      });
    }
    return container.show();
  };

  netuno.buildReport = function(report) {
    var container, containerForm, containerResult;
    if (!(report instanceof jQuery)) {
      report = $(report);
    }
    container = report.parents("[netuno-report][netuno-report-uid]:first");
    containerResult = container.children(`[netuno-report-result=${container.attr('netuno-report-name')}]`);
    containerForm = container.find(`form[name=netuno_report_${container.attr('netuno-report-name')}_form]:first`);
    netuno.unmask(containerForm);
    containerForm.ajaxForm().submit();
    if (containerForm.validate().valid()) {
      netuno.mask(containerForm);
      containerForm.ajaxForm({
        url: `${netuno.config.urlAdmin}ReportBuilder${netuno.config.extension}`,
        iframe: false,
        success: function(response) {
          containerResult.html(response);
          return netuno.contentLoaded(containerResult);
        }
      }).submit();
      return true;
    } else {
      netuno.mask(containerForm);
      return false;
    }
  };

  netuno.loadValidation = function(form) {
    var rules;
    if (!(form instanceof jQuery)) {
      form = $(form);
    }
    form = form.is("form") ? form : form.closest("form");
    rules = {};
    form.find("[validation]").each(function() {
      var element, validation;
      element = $(this);
      validation = element.attr("validation");
      rules[element.attr("name")] = {};
      if (validation.indexOf("required") > -1) {
        rules[element.attr("name")]["required"] = true;
      }
      if (validation.indexOf("email") > -1) {
        return rules[element.attr("name")]["email"] = true;
      }
    });
    return form.validate({
      "errorElement": 'span',
      "errorClass": 'help-block',
      "focusInvalid": false,
      "ignore": "",
      "rules": rules,
      "invalidHandler": function(event, validator) {},
      "highlight": function(element) {
        return $(element).closest('.form-group').addClass('has-error');
      },
      "success": function(label) {
        label.closest('.form-group').removeClass('has-error');
        return label.remove();
      },
      "errorPlacement": function(error, element) {
        return error.insertAfter(element.closest('.input-icon'));
      }
    });
  };

  netuno.downloadProgress = function(url) {
    var modal, tickStatus, time;
    time = new Date().getTime();
    $("body").append(`<iframe id=\"netuno_download_${time}\" src=\"${url}&downloadToken=${time}\" style=\"display: none;\"></iframe>`);
    if (!navigator.userAgent.match(/msie/i)) {
      modal = $('#netuno_download');
      modal.modal('show');
      tickStatus = function() {
        $('\#netuno_download_progress_bar').css('width', "100%").attr('aria-valuenow', 100);
        return $.ajax({
          type: 'POST',
          url: `${url}&downloadToken=${time}&downloadStatus=true`,
          success: function(response) {
            var iframe;
            if (response === 'done') {
              iframe = $(`\#netuno_download_${time}`);
              if ($(`\#netuno_download_${time}`).length > 0) {
                return window.setTimeout(function() {
                  modal.modal('hide');
                  $('\#netuno_download_progress_bar').css('width', "0%").attr('aria-valuenow', 0);
                  return iframe.remove();
                }, 1000);
              }
            } else {
              return window.setTimeout(tickStatus, 1000);
            }
          }
        });
      };
      return tickStatus();
    }
  };

  netuno.keepAlive = function() {
    if (typeof netuno.config.user !== 'undefined') {
      return $.ajax({
        type: 'POST',
        url: `${netuno.config.urlAdmin}KeepAlive${netuno.config.extension}`,
        success: function(response) {
          if (response === "1") {
            return window.setTimeout('netuno.keepAlive();', 360000);
          } else {
            return document.location.href = `${netuno.config.urlAdmin}Index${netuno.config.extension}`;
          }
        }
      });
    }
  };

  netuno.loadLinks = function(container) {
    return container.find("a").on("click", function() {
      var element, formName, reportName, ul;
      element = $(this);
      if (element.attr("rel") === "external") {
        if (element.attr("target") === "_blank") {
          window.open(element.attr("href"));
          return false;
        } else {
          window.location.href = element.attr("href");
          return false;
        }
      } else {
        if (element.is("[data-toggle]")) {
          ul = element.parent().children('ul');
          if (ul.is(':hidden')) {
            ul.fadeIn();
            element.children('i:last-child').removeClass('fa-caret-down').addClass('fa-caret-up');
          } else {
            ul.fadeOut();
            element.children('i:last-child').removeClass('fa-caret-up').addClass('fa-caret-down');
          }
        }
        if (element.parents('.navbar-nav').length === 1) {
          if ($('body > div.dev').length === 0 || element.parents('.nav-management').length === 0) {
            $('.navbar-toggle:visible').click();
          }
          element.trigger('netuno:click');
          window.scrollTo(0, 0);
        }
        if (element.is("[netuno-content]")) {
          container = $(element.attr("href"));
          $("#containers > div").hide();
          if (container.length > 0 && container.is(":empty")) {
            $.ajax({
              url: element.attr('netuno-content'),
              success: function(response) {
                container.html(response);
                return netuno.contentLoaded(container);
              }
            });
          }
          container.show();
          return false;
        } else if (element.is("[netuno-form]")) {
          formName = element.attr("netuno-form");
          $("\#containers > div").hide();
          netuno.loadForm($(`\#containers > div[netuno-form-name=${formName}]`));
          return false;
        } else if (element.is("[netuno-report]")) {
          reportName = element.attr("netuno-report");
          $("#containers > div").hide();
          netuno.loadReport($(`\#containers > div[netuno-report-name=${reportName}]`));
          return false;
        } else if (element.attr("href") !== "#" && element.attr("href").substring('javascript:') === -1) {
          container = $(element.attr("href"));
          if (container.length) {
            $("#containers > div").hide();
            container.show();
          }
        }
        return false;
      }
    });
  };

  netuno.mask = function(container) {
    return container.find('[data-mask]').each(function() {
      var decimalsMultiple, i, j, k, l, maskDecimals, maskDecimalsLen, n, o, ref, ref1, ref2, ref3, val, valFloat, value;
      o = $(this);
      if (o.attr('data-mask') !== null && o.attr('data-mask') !== '') {
        if (o.attr('data-type') === 'textfloat') {
          value = o.is(':input') ? o.val() : o.text();
          maskDecimals = o.attr('data-mask').match(/0[.,](0+)/);
          if (maskDecimals != null) {
            maskDecimalsLen = maskDecimals[1].length;
            decimalsMultiple = 10;
            for (i = k = 1, ref = maskDecimalsLen - 1; (1 <= ref ? k <= ref : k >= ref); i = 1 <= ref ? ++k : --k) {
              decimalsMultiple *= 10;
            }
            o.attr('data-mask-clean-value', value);
            if (value.indexOf('.') > 0) {
              valFloat = parseFloat(value);
              valFloat = Math.round(valFloat * decimalsMultiple) / decimalsMultiple;
              val = `${valFloat}`;
              for (j = l = ref1 = val.length - (val.indexOf('.') > 0 ? val.indexOf('.') + 1 : val.length), ref2 = maskDecimalsLen; (ref1 <= ref2 ? l <= ref2 : l >= ref2); j = ref1 <= ref2 ? ++l : --l) {
                if (j < maskDecimalsLen) {
                  val += '0';
                }
              }
              if (o.is(':input')) {
                o.val(val);
              } else {
                o.text(val);
              }
            } else if (value !== '') {
              val = value;
              for (j = n = 1, ref3 = maskDecimalsLen; (1 <= ref3 ? n <= ref3 : n >= ref3); j = 1 <= ref3 ? ++n : --n) {
                val += '0';
              }
              if (o.is(':input')) {
                o.val(val);
              } else {
                o.text(val);
              }
            }
          }
        }
        return o.mask(o.attr('data-mask'), {
          reverse: o.attr('data-mask-reverse') === 'true',
          selectOnFocus: o.attr('data-mask-selectonfocus') === 'true',
          onChange: function(val) {
            var decimals, decimalsLen;
            if (o.attr('data-type') === 'textfloat') {
              decimals = o.attr('data-mask').match(/0[.,](0+)/);
              if (decimals != null) {
                decimalsLen = decimals[1].length;
                val = o.cleanVal();
                val = `${val.substring(0, val.length - decimalsLen)}.${val.substring(val.length - decimalsLen)}`;
                return o.attr('data-mask-clean-value', val);
              }
            }
          }
        });
      }
    });
  };

  netuno.unmask = function(container) {
    return container.find('[data-mask]').each(function() {
      var data, o;
      o = $(this);
      if (typeof o.data().mask !== 'undefined' && o.data().mask !== null) {
        if (o.text() !== '') {
          data = o.data();
          delete data.mask;
          o.data(data);
        } else {
          o.unmask();
        }
        if ((o.attr('data-mask-clean-value') != null) && o.attr('data-mask-clean-value') !== '') {
          return o.val(o.attr('data-mask-clean-value'));
        }
      }
    });
  };

  netuno.addContentLoad(function(container) {
    return netuno.loadLinks(container);
  });

  netuno.addContentLoad(function(container) {
    return container.find("select").select2({
      theme: "bootstrap",
      placeholder: "",
      maximumSelectionSize: 6
    });
  });

  netuno.addContentLoad(function(container) {
    return netuno.mask(container);
  });

  netuno.openRelation = function(name) {
    var container, containerSearch;
    container = $(`\#netuno_form_${name}`);
    containerSearch = container.children('[netuno-form-search]');
    if (containerSearch.is(':empty')) {
      $.ajax({
        type: 'POST',
        url: `${netuno.config.urlAdmin}Search${netuno.config.extension}`,
        data: {
          'netuno_table_uid': container.attr('netuno-form-uid')
        },
        success: function(response) {
          containerSearch.html(response);
          return netuno.contentLoaded(containerSearch);
        }
      });
    }
    return container.show();
  };

  netuno.addPageLoad(function() {
    return netuno.loadLinks($("body"));
  });

  netuno.modal = {};

  netuno.modal.stack = [];

  netuno.modal.create = function(config) {
    var key;
    config = $.extend({
      name: null,
      container: $('body'),
      relation: false,
      callback: function(modal) {}
    }, config);
    if (config.name === null) {
      return;
    }
    key = netuno.newUid();
    return $.ajax({
      type: 'POST',
      url: `${netuno.config.urlAdmin}Edit${netuno.config.extension}`,
      dataType: 'json',
      data: {
        netuno_action: 'uid',
        netuno_table_name: config.name
      },
      success: function(response) {
        var modalRelationFormParam, modalRelationParam;
        modalRelationParam = "";
        modalRelationFormParam = "";
        if (config.relation) {
          modalRelationParam = `netuno-form-edit-relation-modal=\"${config.name}\"`;
          modalRelationFormParam = `netuno-form-relation netuno-table-uid=\"${config.relation.table_uid}\" netuno-item-uid=\"${config.relation.item_uid}\"`;
        }
        config.container.append(`<div id="netuno-modal-${key}" ${modalRelationParam} class="netuno-modal">
  <div class="container-fluid">
    <div netuno-form netuno-form-uid="${response.uid}" netuno-form-name="${config.name}" ${modalRelationFormParam}>
      <div class="netuno-form-edit" netuno-form-edit></div>
      <div class="netuno-form-search" netuno-form-search></div>
    </div>
  </div>
</div>`);
        return config.callback($(`\#netuno-modal-${key}`));
      }
    });
  };

  netuno.modal.showAndLoad = function(modal) {
    if (!(modal instanceof jQuery)) {
      modal = $(modal);
    }
    netuno.modal.show(modal);
    return netuno.loadForm(modal.find('[netuno-form]'));
  };

  netuno.modal.show = function(modal) {
    if (!(modal instanceof jQuery)) {
      modal = $(modal);
    }
    modal.trigger('netuno:modal:show');
    $('#netuno-modal-curtain').fadeIn();
    $('#netuno-modal-close').show();
    modal.show();
    netuno.modal.stack.push(modal);
    return modal.trigger('netuno:modal:shown');
  };

  netuno.modal.hide = function(modal) {
    var i, k, ref;
    if (!(modal instanceof jQuery)) {
      modal = $(modal);
    }
    modal.trigger('netuno:modal:hide');
    modal.hide();
    for (i = k = 0, ref = netuno.modal.stack.length; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
      if (netuno.modal.stack[i] === modal) {
        netuno.modal.stack.splice(i, 1);
      }
    }
    if (netuno.modal.stack.length === 0) {
      $('#netuno-modal-curtain').fadeOut();
      $('#netuno-modal-close').hide();
    }
    return modal.trigger('netuno:modal:hidden');
  };

  netuno.modal.hideLast = function() {
    if (netuno.modal.stack.length > 0) {
      return netuno.modal.hide(netuno.modal.stack[netuno.modal.stack.length - 1]);
    }
  };

  netuno.com = {};

  netuno.com['text'] = {
    'html': {
      'load': function(id, css) {
        var summernote;
        return summernote = $(`\#${id}`).summernote({
          callbacks: {
            onImageUpload: function(files) {
              var file, k, len, results, upload;
              upload = function(file) {
                var comUid, formData;
                comUid = summernote.attr('netuno-texthtml-uid');
                formData = new FormData();
                formData.append("com_uid", comUid);
                formData.append("file", file, file.name);
                return $.ajax({
                  method: "POST",
                  url: `${netuno.config.urlAdmin}com/TextHtml${netuno.config.extension}`,
                  contentType: false,
                  cache: false,
                  processData: false,
                  data: formData,
                  dataType: "json",
                  success: function(data) {
                    return summernote.summernote("insertImage", data.url);
                  },
                  error: function(jqXHR, textStatus, errorThrown) {
                    return console.error(`${textStatus} ${errorThrown}`);
                  }
                });
              };
              results = [];
              for (k = 0, len = files.length; k < len; k++) {
                file = files[k];
                results.push(upload(file));
              }
              return results;
            }
          },
          height: 200
        });
      }
    },
    'md': {
      'load': function(id) {
        var comUid, container, textarea;
        container = $(`\#${id}`);
        textarea = container.find("[netuno-textmd-uid]");
        comUid = textarea.attr('netuno-textmd-uid');
        return window.setTimeout(function() {
          var editor;
          return editor = editormd(id, {
            width: "100%",
            height: "400px",
            path: "/netuno/scripts/sbadmin/plugins/editor.md/lib/",
            codeFold: true,
            emoji: true,
            taskList: true,
            tocm: true,
            tex: true,
            flowChart: true,
            sequenceDiagram: true,
            imageUpload: true,
            imageFormats: ["jpg", "jpeg", "gif", "png", "svg", "webp"],
            imageUploadURL: `${netuno.config.urlAdmin}com/TextMD${netuno.config.extension}?com_uid=${comUid}`,
            onfullscreen: function() {
              return editor.editor.css('z-index', 10000);
            },
            onfullscreenExit: function() {
              return editor.editor.css('z-index', 0);
            },
            onload: function() {
              this.unwatch();
              return this.previewed();
            },
            lang: {
              name: "en",
              description: "Open source online Markdown editor.",
              tocTitle: "Table of Contents",
              toolbar: {
                undo: "Undo(Ctrl+Z)",
                redo: "Redo(Ctrl+Y)",
                bold: "Bold",
                del: "Strikethrough",
                italic: "Italic",
                quote: "Block quote",
                ucwords: "Words first letter convert to uppercase",
                uppercase: "Selection text convert to uppercase",
                lowercase: "Selection text convert to lowercase",
                h1: "Heading 1",
                h2: "Heading 2",
                h3: "Heading 3",
                h4: "Heading 4",
                h5: "Heading 5",
                h6: "Heading 6",
                "list-ul": "Unordered list",
                "list-ol": "Ordered list",
                hr: "Horizontal rule",
                link: "Link",
                "reference-link": "Reference link",
                image: "Image",
                code: "Code inline",
                "preformatted-text": "Preformatted text / Code block (Tab indent)",
                "code-block": "Code block (Multi-languages)",
                table: "Tables",
                datetime: "Datetime",
                emoji: "Emoji",
                "html-entities": "HTML Entities",
                pagebreak: "Page break",
                watch: "Unwatch",
                unwatch: "Watch",
                preview: "HTML Preview (Press Shift + ESC exit)",
                fullscreen: "Fullscreen (Press ESC exit)",
                clear: "Clear",
                search: "Search",
                help: "Help",
                info: "About "
              },
              buttons: {
                enter: "Enter",
                cancel: "Cancel",
                close: "Close"
              },
              dialog: {
                link: {
                  title: "Link",
                  url: "Address",
                  urlTitle: "Title",
                  urlEmpty: "Error: Please fill in the link address."
                },
                referenceLink: {
                  title: "Reference link",
                  name: "Name",
                  url: "Address",
                  urlId: "ID",
                  urlTitle: "Title",
                  nameEmpty: "Error: Reference name can't be empty.",
                  idEmpty: "Error: Please fill in reference link id.",
                  urlEmpty: "Error: Please fill in reference link url address."
                },
                image: {
                  title: "Image",
                  url: "Address",
                  link: "Link",
                  alt: "Title",
                  uploadButton: "Upload",
                  imageURLEmpty: "Error: picture url address can't be empty.",
                  uploadFileEmpty: "Error: upload pictures cannot be empty!",
                  formatNotAllowed: "Error: only allows to upload pictures file, upload allowed image file format:"
                },
                preformattedText: {
                  title: "Preformatted text / Codes",
                  emptyAlert: "Error: Please fill in the Preformatted text or content of the codes.",
                  placeholder: "coding now...."
                },
                codeBlock: {
                  title: "Code block",
                  selectLabel: "Languages: ",
                  selectDefaultText: "select a code language...",
                  otherLanguage: "Other languages",
                  unselectedLanguageAlert: "Error: Please select the code language.",
                  codeEmptyAlert: "Error: Please fill in the code content.",
                  placeholder: "coding now...."
                },
                htmlEntities: {
                  title: "HTML Entities"
                },
                help: {
                  title: "Help"
                }
              }
            }
          });
        }, 250);
      }
    }
  };

  netuno.com['select'] = {
    callbacks: [],
    getConfig: function(fieldId, service, ajaxParams) {
      var delayCallbacks, field, placeholder;
      netuno.com.select.loadCallbacksForFieldId(fieldId);
      delayCallbacks = new Date().getTime();
      field = $(`\#${fieldId}`);
      placeholder = netuno.config.com.lang.select["defaulttext"];
      if (field.attr("multiple")) {
        placeholder = $('<div />').html(placeholder).text();
      }
      return {
        // dropdownParent: field.parent()
        theme: "bootstrap",
        placeholder: placeholder,
        allowClear: true,
        data: [],
        ajax: {
          url: service,
          dataType: 'json',
          delay: 250,
          data: function(params) {
            return $.extend(true, {
              q: params.term,
              page: params.page,
              page_limit: 10
            }, ajaxParams);
          },
          processResults: function(data, params) {
            if (params.page != null) {
              params.page = 1;
            }
            return {
              results: data
            };
          }
        },
        templateResult: function(item) {
          return item.label;
        },
        templateSelection: function(item) {
          var callback, key;
          $(`\#${fieldId}`).parent().parent().removeClass("has-error");
          if (new Date().getTime() < delayCallbacks + 250) {
            if (item.label) {
              return item.label;
            } else {
              return item.text;
            }
          }
          for (key in netuno.com.select.callbacks[fieldId]) {
            callback = netuno.com.select.callbacks[fieldId][key];
            if ($.isFunction(callback)) {
              callback(item.id);
              delayCallbacks = new Date().getTime();
            }
          }
          if (item.label) {
            return item.label;
          } else {
            return item.text;
          }
        },
        escapeMarkup: function(m) {
          return m;
        }
      };
    },
    callbackForFieldId: function(fieldId, key, callback) {
      netuno.com.select.loadCallbacksForFieldId(fieldId);
      return netuno.com.select.callbacks[fieldId][key] = callback;
    },
    loadCallbacksForFieldId: function(fieldId) {
      if ((fieldId != null) && fieldId.length > 0 && (netuno.com.select.callbacks[fieldId] == null)) {
        return netuno.com.select.callbacks[fieldId] = {};
      }
    },
    load: function(fieldId, comUid, service) {
      var select2;
      select2 = $(`\#${fieldId}`).select2(netuno.com.select.getConfig(fieldId, service, {
        com_uid: comUid
      }));
      return select2;
    },
    loadInContainer: function(container) {
      container.find("select[netuno-select-uid]").each(function() {
        var comUid, option, select, select2, service, value;
        select = $(this);
        select.select2('destroy');
        value = select.attr('value');
        comUid = select.attr('netuno-select-uid');
        service = select.attr('netuno-select-service');
        if ((comUid != null) && comUid !== '') {
          select2 = select.select2(netuno.com.select.getConfig(select.attr('id'), service, {
            com_uid: comUid
          }));
          if ((value != null) && value !== '') {
            option = $(`<option selected>${netuno.config.com.lang.select["searching"]}</option>`).val(value);
            select.append(option);
            select.trigger('change');
            return $.ajax({
              dataType: "jsonp",
              url: `${service}?com_uid=${comUid}&data_uid=${value}`
            }).then(function(data) {
              var selectContainer, selectId;
              if ((data != null) && (data.label != null) && (data.id != null)) {
                option.html(data.label).val(data.id);
                option.removeData();
                select.trigger('change');
                selectId = select.attr('id');
                selectContainer = $(`\#select2-${selectId}-container`);
                return selectContainer.contents().filter(function() {
                  return this.nodeType === 3;
                })[0].nodeValue = $('<div />').html(data.label).text();
              } else {
                //selectContainer.html(data.label)
                //selectContainer.prepend($(document.createElement("span")).addClass('select2-selection__clear').text('×').data(data).on('click', (e)->
                //  select = $("\##{ selectId }")
                //  select.attr("value", "")
                //  select.empty()
                //  netuno.com.select.loadInContainer(select.parent())
                //  e.preventDefault()
                //))
                //selectContainer.find('.select2-selection__clear').data(data)
                selectId = select.attr('id');
                selectContainer = $(`\#select2-${selectId}-container`);
                return selectContainer.contents().filter(function() {
                  return this.nodeType === 3;
                })[0].nodeValue = $('<div />').html(netuno.config.com.lang.select["defaulttext"]).text();
              }
            });
          }
        }
      });
      container.find("select[netuno-select-link]").each(function() {
        var columnSeparator, link, maxColumnLength, onlyActives, select2, service;
        link = $(this).attr('netuno-select-link');
        columnSeparator = $(this).attr('netuno-select-column-separator');
        maxColumnLength = $(this).attr('netuno-select-max-column-length');
        onlyActives = $(this).attr('netuno-select-only-actives');
        service = $(this).attr('netuno-select-service');
        if ((link != null) && link !== '') {
          return select2 = $(this).select2(netuno.com.select.getConfig($(this).attr('id'), service, {
            link: link,
            column_separator: columnSeparator,
            max_column_length: maxColumnLength,
            only_actives: onlyActives
          }));
        }
      });
      return container.find("select[netuno-select-service]:not([netuno-select-uid],[netuno-select-link])").each(function() {
        var option, select, select2, service, value;
        service = $(this).attr('netuno-select-service');
        if ((service != null) && service !== '') {
          select = $(this);
          select.select2('destroy');
          value = select.attr('value');
          service = select.attr('netuno-select-service');
          select2 = $(this).select2(netuno.com.select.getConfig($(this).attr('id'), service));
          if ((value != null) && value !== '') {
            option = $(`<option selected>${netuno.config.com.lang.select["searching"]}</option>`).val(value);
            select.append(option);
            select.trigger('change');
            return $.ajax({
              dataType: "jsonp",
              url: `${service}&data_uid=${value}`
            }).then(function(data) {
              var selectContainer, selectId;
              if ((data != null) && (data.label != null) && (data.id != null)) {
                option.html(data.label).val(data.id);
                option.removeData();
                select.trigger('change');
                selectId = select.attr('id');
                selectContainer = $(`\#select2-${selectId}-container`);
                return selectContainer.contents().filter(function() {
                  return this.nodeType === 3;
                })[0].nodeValue = $('<div />').html(data.label).text();
              }
            });
          }
        }
      });
    },
    setValue: function(select, uid) {
      select.empty().append($('<option></option>')).append($('<option selected></option>').val(uid)).val(uid).attr('value', uid);
      return netuno.com.select.loadInContainer(select.parent());
    }
  };

  netuno.com['multiselect'] = {
    loadInContainer: function(container) {
      return container.find("select[netuno-multiselect-uid]").each(function() {
        var comUid, input, select2, service, value;
        input = $(this);
        input.select2('destroy');
        value = input.attr('value');
        comUid = input.attr('netuno-multiselect-uid');
        service = input.attr('netuno-multiselect-service');
        if ((comUid != null) && comUid !== '') {
          return select2 = input.select2(netuno.com.multiselect.getConfig(input.attr('id'), service, {
            com_uid: comUid
          }));
        }
      });
    },
    load: function(fieldId, designId, referenceId) {
      return $(`\#${fieldId}`).select2({
        formatNoMatches: function() {
          return netuno.config.com.lang.multiselect["noresults"];
        },
        formatSearching: function() {
          return netuno.config.com.lang.multiselect["searching"];
        },
        placeholder: $('<div />').html(netuno.config.com.lang.multiselect["defaulttext"]).text(),
        ajax: {
          url: "com/MultiSelect.netuno",
          dataType: 'jsonp',
          data: function(term, page) {
            return {
              id: designId,
              q: term,
              page: page,
              page_limit: 10
            };
          },
          results: function(data, page) {
            return {
              results: data
            };
          }
        },
        id: function(item) {
          return item.id;
        },
        initSelection: function(element, callback) {
          var dataIds;
          dataIds = $(element).val();
          if (dataIds !== "") {
            return $.ajax("com/MultiSelect.netuno", {
              data: {
                id: designId,
                dataids: dataIds,
                referenceid: referenceId
              },
              dataType: "jsonp"
            }).done(function(data) {
              return callback(data);
            });
          }
        },
        formatResult: function(item) {
          return item.label;
        },
        formatSelection: function(item) {
          return item.label;
        },
        escapeMarkup: function(m) {
          return m;
        },
        multiple: true,
        tokenSeparators: [",", " "]
      });
    }
  };

  netuno.com['date'] = {
    load: function(fieldId, container, callback) {
      return $(`\#${fieldId}`).on('change', callback).datepicker({
        format: "yyyy-mm-dd",
        autoclose: true,
        todayHighlight: true,
        orientation: "auto",
        container: `\#${container}`
      });
    }
  };

  netuno.com['time'] = {
    load: function(fieldId, container, callback) {
      var control;
      control = $(`\#${fieldId}`).on('change', callback).clockpicker({
        autoclose: true,
        placement: 'top'
      });
      return control;
    }
  };

  netuno.com['checkbox'] = {
    loadInContainer: function(container) {
      return container.find("[type=\"checkbox\"]").each(function() {
        return $(this).bootstrapSwitch({
          size: "small",
          onText: "<i class=\"fa fa-check\"></i>",
          offText: "<i class=\"fa fa-close\"></i>"
        });
      });
    }
  };

  netuno.com['color'] = {
    load: function(fieldId) {
      var control;
      control = $(`\#${fieldId}`).colorpicker();
      return control;
    }
  };

  netuno.com['image'] = {
    load: function(id) {
      var upload, value;
      upload = $(`\#${id}`);
      if ($(`\#${id}-value`).val().length > 0) {
        value = $(`\#${id}-value`).val();
      } else {
        $(`\#${id}-btView`).hide();
      }
      upload.on("change", function() {
        var input, label, numFiles;
        input = $(this);
        numFiles = input.get(0).files ? input.get(0).files.length : 1;
        label = input.val().replace(/\\/g, '/').replace(/.*\//, '');
        return input.trigger('fileselect', [numFiles, label]);
      });
      return upload.on('fileselect', function(event, numFiles, label) {
        var input, log;
        $(`\#${id}-null`).val('false');
        input = $(this).parents('.input-group').find(':text');
        log = numFiles > 1 ? `${numFiles} files selected` : label;
        if (input.length > 0) {
          return input.val(log);
        }
      });
    },
    view: function(id, url) {
      return window.open(url, "_blank");
    },
    clear: function(id) {
      $(`\#${id}`).val('').parents('.input-group').find(':text').val('');
      $(`\#${id}-fileFeedback`).html('');
      $(`\#${id}-null`).val('true');
      $(`\#${id}-preview`).hide();
      return $(`\#${id}-btView`).hide();
    }
  };

  netuno.com['file'] = {
    load: function(id) {
      var upload;
      upload = $(`\#${id}`);
      if ($(`\#${id}-value`).val().length === 0) {
        $(`\#${id}-btView`).hide();
      }
      upload.on("change", function() {
        var input, label, numFiles;
        input = $(this);
        numFiles = input.get(0).files ? input.get(0).files.length : 1;
        label = input.val().replace(/\\/g, '/').replace(/.*\//, '');
        return input.trigger('fileselect', [numFiles, label]);
      });
      return upload.on('fileselect', function(event, numFiles, label) {
        var input, log;
        $(`\#${id}-null`).val('false');
        input = $(this).parents('.input-group').find(':text');
        log = numFiles > 1 ? `${numFiles} files selected` : label;
        if (input.length > 0) {
          return input.val(log);
        }
      });
    },
    view: function(id) {
      var value;
      value = $(`\#${id}-value`);
      return window.open(value.attr('file-url'));
    },
    clear: function(id) {
      $(`\#${id}`).val('').parents('.input-group').find(':text').val('');
      $(`\#${id}-fileFeedback`).html('');
      $(`\#${id}-null`).val('true');
      return $(`\#${id}-btView`).hide();
    },
    restore: function(id) {}
  };

  $(document).ready(function() {
    netuno.pageLoaded();
    netuno.addContentLoad(function(container) {
      return netuno.com['select'].loadInContainer(container);
    });
    netuno.addContentLoad(function(container) {
      return netuno.com['checkbox'].loadInContainer(container);
    });
    netuno.keepAlive();
    $(document).on('show.bs.modal', function(event) {
      var parents, target;
      target = $(event.target);
      parents = target.parents('.modal');
      if (parents.length > 0) {
        target.detach().appendTo('body').attr('netuno-parent-modal-id', $(parents[0]).attr('id'));
        return $(parents[0]).modal('hide');
      }
    });
    return $(document).on('hidden.bs.modal', function(event) {
      var target;
      target = $(event.target);
      if (target.attr('netuno-parent-modal-id')) {
        target.detach().appendTo(`\#${target.attr('netuno-parent-modal-id')}`);
        return $(`\#${target.attr('netuno-parent-modal-id')}`).modal('show');
      }
    });
  });

  //$(event.relatedTarget).parents('.modal')
//$(event.relatedTarget).parents('.modal').modal('hide')
//$(document).on 'shown.bs.modal', (event) ->
//  if ($('body').hasClass('modal-open') == false)
//    $('body').addClass('modal-open')

}).call(this);
