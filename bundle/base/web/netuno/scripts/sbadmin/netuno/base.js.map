{
  "version": 3,
  "file": "base.js",
  "sourceRoot": "",
  "sources": [
    "base.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\nclass Netuno\n  config: {}\n  pageLoads: []\n  contentLoads: []\n  navigationLoads: []\n\n  addPageLoad: (func) ->\n    @pageLoads.push func\n\n  pageLoaded: () ->\n    for pageLoad in @pageLoads\n      pageLoad()\n\n  addContentLoad: (func) ->\n    @contentLoads.push func\n\n  contentLoaded: (container) ->\n    for contentLoad in @contentLoads\n      contentLoad(container)\n\n  addNavigationLoad: (func) ->\n    @navigationLoads.push func\n\n  navigationLoaded: () ->\n    for navigationLoad in @navigationLoads\n      navigationLoad()\n\n  urlWithParams: (url, obj)->\n    params = Object.keys(obj).reduce((a, k) ->\n      v = encodeURIComponent(obj[k])\n      a.push(\"#{k}=#{v}\")\n      return a\n    , []).join('&')\n    str = \"#{url}?#{params}\"\n    return str\n\n  service: (args) ->\n    settings = {\n      url: ''\n      method: 'GET'\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept':  'application/json'\n      },\n      success: (data)->\n      fail: (data)->\n    }\n    $.extend(settings, args)\n    if (settings.method == 'GET' && settings.data)\n      settings.url = @.urlWithParams(settings.url, settings.data)\n    else if (settings.data && settings.headers['Content-Type'] == 'application/json')\n      settings.body = JSON.stringify(settings.data)\n    fetch(settings.url, settings).then(\n      (response) ->\n        if (response.ok)\n          if (response.status == 204)\n            settings.success()\n          else\n            contentType = response.headers.get(\"Content-Type\")\n            if (contentType && contentType.toLowerCase().indexOf(\"application/json\") == 0)\n              return response.json().then((data) ->\n                settings.success {\n                  json: data\n                }\n              )\n            else\n              return response.text().then((text) ->\n                settings.sucess {\n                  text: text\n                }\n              )\n        else\n          settings.fail {\n            response: response\n          }\n    ).catch(\n      (e)->\n        settings.fail {\n          error: e\n        }\n    )\n\n`this.netuno = new Netuno()`"
  ]
}