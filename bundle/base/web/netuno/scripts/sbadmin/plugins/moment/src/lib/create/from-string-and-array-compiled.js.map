{"version":3,"sources":["from-string-and-array.js"],"names":[],"mappings":"AAAA,SAAS,UAAU,QAAQ,uBAAuB,CAAC;AACnD,SAAS,yBAAyB,QAAQ,0BAA0B,CAAC;AACrE,OAAO,eAAe,MAAM,iBAAiB,CAAC;AAC9C,SAAS,OAAO,QAAQ,SAAS,CAAC;AAClC,OAAO,MAAM,MAAM,iBAAiB;;;AAAC,AAGrC,OAAO,SAAS,wBAAwB,CAAC,MAAM,EAAE;AAC7C,QAAI,UAAU,EACV,UAAU,EAEV,WAAW,EACX,CAAC,EACD,YAAY,CAAC;;AAEjB,QAAI,MAAM,CAAC,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;AACxB,uBAAe,CAAC,MAAM,CAAC,CAAC,aAAa,GAAG,IAAI,CAAC;AAC7C,cAAM,CAAC,EAAE,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;AAC1B,eAAO;KACV;;AAED,SAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACnC,oBAAY,GAAG,CAAC,CAAC;AACjB,kBAAU,GAAG,UAAU,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;AACpC,YAAI,MAAM,CAAC,OAAO,IAAI,IAAI,EAAE;AACxB,sBAAU,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;SACvC;AACD,kBAAU,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC7B,iCAAyB,CAAC,UAAU,CAAC,CAAC;;AAEtC,YAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;AACtB,qBAAS;SACZ;;;AAAA,AAGD,oBAAY,IAAI,eAAe,CAAC,UAAU,CAAC,CAAC,aAAa;;;AAAC,AAG1D,oBAAY,IAAI,eAAe,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,MAAM,GAAG,EAAE,CAAC;;AAErE,uBAAe,CAAC,UAAU,CAAC,CAAC,KAAK,GAAG,YAAY,CAAC;;AAEjD,YAAI,WAAW,IAAI,IAAI,IAAI,YAAY,GAAG,WAAW,EAAE;AACnD,uBAAW,GAAG,YAAY,CAAC;AAC3B,sBAAU,GAAG,UAAU,CAAC;SAC3B;KACJ;;AAED,UAAM,CAAC,MAAM,EAAE,UAAU,IAAI,UAAU,CAAC,CAAC;CAC5C","file":"from-string-and-array-compiled.js","sourcesContent":["import { copyConfig } from '../moment/constructor';\nimport { configFromStringAndFormat } from './from-string-and-format';\nimport getParsingFlags from './parsing-flags';\nimport { isValid } from './valid';\nimport extend from '../utils/extend';\n\n// date from string and array of format strings\nexport function configFromStringAndArray(config) {\n    var tempConfig,\n        bestMoment,\n\n        scoreToBeat,\n        i,\n        currentScore;\n\n    if (config._f.length === 0) {\n        getParsingFlags(config).invalidFormat = true;\n        config._d = new Date(NaN);\n        return;\n    }\n\n    for (i = 0; i < config._f.length; i++) {\n        currentScore = 0;\n        tempConfig = copyConfig({}, config);\n        if (config._useUTC != null) {\n            tempConfig._useUTC = config._useUTC;\n        }\n        tempConfig._f = config._f[i];\n        configFromStringAndFormat(tempConfig);\n\n        if (!isValid(tempConfig)) {\n            continue;\n        }\n\n        // if there is any input that was not parsed add a penalty for that format\n        currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n        //or tokens\n        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n\n        getParsingFlags(tempConfig).score = currentScore;\n\n        if (scoreToBeat == null || currentScore < scoreToBeat) {\n            scoreToBeat = currentScore;\n            bestMoment = tempConfig;\n        }\n    }\n\n    extend(config, bestMoment || tempConfig);\n}\n"]}