// Generated by CoffeeScript 2.7.0
(function() {
  var NetunoCoder;

  NetunoCoder = class NetunoCoder {
    constructor(container) {
      this.containers = {
        filesystem: {
          base: container.find("[netuno-coder-filesystem]"),
          notifications: container.find("[netuno-coder-notifications]"),
          tree: null,
          modal: null
        }
      };
      this.initFileSystem();
    }

    initFileSystem() {
      return $.ajax({
        url: `${netuno.config.urlAdmin}dev/coder/FileSystem${netuno.config.extension}`,
        success: (response) => {
          this.containers.filesystem.base.html(response);
          this.containers.filesystem.tree = this.containers.filesystem.base.find("[netuno-coder-filesystem-tree]");
          this.containers.filesystem.createModal = this.containers.filesystem.base.find("[netuno-coder-filesystem-create-modal]");
          this.containers.filesystem.modal = this.containers.filesystem.base.find("[netuno-coder-filesystem-modal]");
          return this.initFileSystemTree();
        }
      });
    }

    initFileSystemTree() {
      return $.ajax({
        url: `${netuno.config.urlAdmin}dev/coder/FileSystem${netuno.config.extension}?action=tree`,
        dataType: "json",
        success: (data) => {
          var previousNodeClicked;
          previousNodeClicked = null;
          this.containers.filesystem.tree.tree({
            data: data,
            autoOpen: true,
            dragAndDrop: true,
            selectable: true,
            onCreateLi: (node, $li) => {
              if (node.children.length > 0) {
                return $li.find('.jqtree-element').append(` &middot; <a href="#node-${node.id}" class="create" data-node-id="${node.id}"><i class="fa fa-plus-circle" /></a>`);
              }
            }
          });
          this.containers.filesystem.tree.find('.create').on('click', (e) => {
            var a, node;
            e.preventDefault();
            a = $(e.currentTarget);
            node = this.containers.filesystem.tree.tree('getNodeById', a.data().nodeId);
            this.containers.filesystem.modal.find('.modal-title').text(node.name);
            this.containers.filesystem.createModal.find('[name="folder"]').bootstrapSwitch({
              offText: 'NEW FILE',
              onText: 'NEW FOLDER'
            });
            this.containers.filesystem.createModal.modal('show');
            if (typeof this.containers.filesystem.createModal.find('[type="file"]').data().blueimpFileupload !== 'undefined') {
              this.containers.filesystem.createModal.find('[type="file"]').fileupload('destroy');
            }
            this.containers.filesystem.createModal.find('[type="file"]').fileupload({
              url: `${netuno.config.urlAdmin}dev/coder/FileSystem${netuno.config.extension}?action=upload&path=${a.data().nodeId}`,
              dataType: 'json',
              done: (e, data) => {
                return $.each(data.result.files, (index, file) => {
                  return $("<p/>").text(file.name).appendTo(document.body);
                });
              },
              progressall: (e, data) => {
                var progress;
                progress = parseInt(data.loaded / data.total * 100, 10);
                return this.containers.filesystem.createModal.find('[class="progress"]').css('width', `${progress}%`);
              }
            });
            return false;
          });
          this.containers.filesystem.tree.on('tree.click', (e) => {
            e.preventDefault();
            console.log('node_clicked', e.node);
            this.containers.filesystem.tree.tree('selectNode', e.node);
            if (previousNodeClicked !== null && e.node.id === previousNodeClicked.id) {
              if (typeof e.node.parent.id !== 'undefined') {
                this.containers.filesystem.modal.find('.netuno-dev-coder-filesystem-modal-path').text(e.node.parent.id).show();
              } else {
                this.containers.filesystem.modal.find('.netuno-dev-coder-filesystem-modal-path').hide();
              }
              this.containers.filesystem.modal.find('.modal-title').text(e.node.name);
              this.containers.filesystem.modal.find('[name="name"]').val(e.node.name);
              this.containers.filesystem.modal.modal('show');
              this.containers.filesystem.modal.find('.btn-primary').off('click').on('click', () => {
                return $.ajax({
                  url: `${netuno.config.urlAdmin}dev/coder/FileSystem${netuno.config.extension}?action=rename`,
                  data: {
                    folder: e.node.parent.id,
                    from: e.node.name,
                    to: this.containers.filesystem.modal.find('[name="name"]').val()
                  },
                  success: (response) => {
                    if (response.result === true) {
                      e.node.id = `${e.node.parent.id}/${response.name}`;
                      e.node.name = `${response.name}`;
                      this.containers.filesystem.tree.tree('moveNode', e.node, e.node.parent, 'inside');
                    }
                    this.containers.filesystem.notifications.html(response.output);
                    return this.containers.filesystem.modal.modal('hide');
                  },
                  fail: () => {
                    debugger;
                  }
                });
              });
            }
            return previousNodeClicked = e.node;
          });
          this.containers.filesystem.tree.on('tree.select', (e) => {});
          /*
          for node in @containers.filesystem.tree.tree('getSelectedNodes')
            console.log 'remove-node', node
            @containers.filesystem.tree.tree('removeFromSelection', node)
          console.log('node_selected', e.node)
          @containers.filesystem.tree.tree('selectNode', e.node)
          */
          return this.containers.filesystem.tree.bind('tree.move', (e) => {
            e.preventDefault();
            return $.ajax({
              url: `${netuno.config.urlAdmin}dev/coder/FileSystem${netuno.config.extension}?action=move`,
              data: {
                from: e.move_info.moved_node.id,
                to: e.move_info.target_node.id
              },
              success: (response) => {
                if (response.result === true) {
                  e.move_info.moved_node.id = `${e.move_info.target_node.id}/${e.move_info.moved_node.name}`;
                  this.containers.filesystem.tree.tree('moveNode', e.move_info.moved_node, e.move_info.target_node, 'inside');
                }
                return this.containers.filesystem.notifications.html(response.output);
              },
              fail: () => {
                debugger;
              }
            });
          });
        },
        fail: () => {
          debugger;
        }
      });
    }

  };

  window.NetunoCoder = NetunoCoder;

}).call(this);
